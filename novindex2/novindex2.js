



/* novindex2.js */
"use strict";

/* ===========================
   üß≠ –ü–™–¢–ò–©–ê –ò –ü–û–ú–û–©–ù–ò –ù–ï–©–ê
   =========================== */

/* üî∂ –ü—Ä–æ–º–æ—Ü–∏–∏: –ª–æ–≥–æ –∏ –ª–∏–Ω–∫–æ–≤–µ (—Å–∞–º–æ –∑–∞ –º–∏–Ω–∏–∞—Ç—é—Ä–∞—Ç–∞ –≤ —Å–∞–π–¥–±–∞—Ä–∞) */
const PROMO_IMG = (location.protocol === "file:")
  ? "file:///E:/BBQ_SITE/promociqlogo.jpg"
  : "promociqlogo.jpg";
const PROMO_LINK_LOCAL = "file:///E:/BBQ_SITE/index7.html";
const PROMO_LINK_WEB   = "index7.html";

/* –º–∞–ª—ä–∫ helper –∑–∞ –±–µ–∑–æ–ø–∞—Å–µ–Ω —Ç–µ–∫—Å—Ç –≤ HTML */
const esc = (s) => String(s)
  .replace(/&/g,"&amp;")
  .replace(/</g,"&lt;")
  .replace(/>/g,"&gt;")
  .replace(/"/g,"&quot;");

/* –¶–µ–Ω–∏ ‚Äì –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä */
const BGN_PER_EUR = 1.95583;
const fmtLv  = v => (Number(v)||0).toFixed(2).replace(".",",") + " –ª–≤.";
const fmtEur = v => ((Number(v)||0) / BGN_PER_EUR).toFixed(2).replace(".",",") + " ‚Ç¨";

/* –õ–µ–∫–∞ –ø–æ–º–æ—â–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –º–æ–±–∏–ª–Ω–∏ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–∏—è */
function recalcMobileOffsets(){
  ensureMobilePlusRight();
  ensurePlusRightUniversal();
}

/* ‚ûú –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –º–µ—Å—Ç–∏ –±—É—Ç–æ–Ω–∞ —Ç–æ—á–Ω–æ –≤–¥—è—Å–Ω–æ –æ—Ç —Ü–µ–Ω–∞—Ç–∞ */
function ensureMobilePlusRight(){
  const isPhone = window.matchMedia("(max-width:900px)").matches;
  if (!isPhone) return;

  document.querySelectorAll(".product .pad").forEach(pad => {
    const price = pad.querySelector(".price-badge");
    const btn   = pad.querySelector(".mobile-add-btn") || pad.querySelector(".add-btn");
    if (!price || !btn) return;

    let row = pad.querySelector(".price-plus");
    if (!row){
      row = document.createElement("div");
      row.className = "price-plus";
      price.replaceWith(row);
      row.appendChild(price);
    }
    row.appendChild(btn);
    btn.style.display = "inline-flex";
    btn.style.width   = "auto";
    btn.style.margin  = "0";
  });
}
window.addEventListener("load",  ensureMobilePlusRight);
window.addEventListener("resize", ensureMobilePlusRight);

/* ‚ûú –£–Ω–∏–≤–µ—Ä—Å–∞–ª–Ω–æ: —Å–∞–º–æ –ø—Ä–µ–º–µ—Å—Ç–≤–∞–º–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏—è ‚Äú+‚Äù —Å–ª–µ–¥ —Ü–µ–Ω–∞—Ç–∞. –ù–ï —Å—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤! */
function ensurePlusRightUniversal(){
  const hosts = document.querySelectorAll('.product, .tile, .water-card');
  hosts.forEach(card => {
    const pad   = card.querySelector('.pad') || card;
    const price = pad.querySelector('.price-badge') || card.querySelector('.price-badge');
    if (!price) return;

    // –∞–∫–æ –ø–æ –ø–æ–≥—Ä–µ—à–∫–∞ –∏–º–∞ –ø–æ–≤–µ—á–µ –æ—Ç –µ–¥–∏–Ω "+" ‚Äî –∑–∞–ø–∞–∑–∏ —Å–∞–º–æ –ø—ä—Ä–≤–∏—è
    const allPlus = pad.querySelectorAll('.add-btn');
    if (allPlus.length > 1) {
      allPlus.forEach((b, i) => { if (i > 0) b.remove(); });
    }

    const plus = pad.querySelector('.add-btn') || card.querySelector('.add-btn');
    if (!plus) return;

    plus.classList.add('add-btn');
    plus.classList.remove('mobile-add-btn');

    if (plus !== price.nextElementSibling) {
      price.insertAdjacentElement('afterend', plus);
    }
  });
}


/* ===========================
   üì¶ –ö–û–õ–ò–ß–ö–ê
   =========================== */

const CART = [];
const cartBtn      = document.getElementById("cartBtn");
const cartCount    = document.getElementById("cartCount");
const cartOverlay  = document.getElementById("cartOverlay");
const cartItemsEl  = document.getElementById("cartItems");
const cartTotalRow = document.getElementById("cartTotalRow");
const cartTotal    = document.getElementById("cartTotal");
const orderNowBtn  = document.getElementById("orderNow");

/* ====== LS –∫–ª—é—á–æ–≤–µ ====== */
const LS_CART_ITEMS = "bbq_cart_items";
const LS_CART_TOTAL = "bbq_cart_total";
const LS_ORDER_NOTE = "bbq_order_note";
const noteWrapper   = document.getElementById("noteWrapper");
const orderNoteEl   = document.getElementById("orderNote");

/* –î–æ–±–∞–≤—è–Ω–µ –∫—ä–º –∫–æ–ª–∏—á–∫–∞—Ç–∞ */
function addToCart(item){
  // –≥–∞—Ä–¥ —Å—Ä–µ—â—É –ø—Ä–∞–∑–Ω–∏ –∞—Ä—Ç–∏–∫—É–ª–∏
  if (!item || !item.baseName || !(item.price >= 0)) return;
  CART.push(item);
  updateCartUI();
}

/* –û—Å–Ω–æ–≤–µ–Ω —Ä–µ–Ω–¥–µ—Ä –Ω–∞ –∫–æ–ª–∏—á–∫–∞—Ç–∞ */
function updateCartUI(){
  if (!cartItemsEl) return;

  if (cartCount) cartCount.textContent = CART.length;

  if (CART.length === 0){
    cartItemsEl.innerHTML = `<div class="cart-empty">–ö–æ–ª–∏—á–∫–∞—Ç–∞ –µ –ø—Ä–∞–∑–Ω–∞.</div>`;
    if (cartTotalRow) cartTotalRow.style.display = "none";
    if (orderNowBtn) orderNowBtn.disabled = true;
    if (noteWrapper) noteWrapper.style.display = "none";
    persistCartSnapshot();
    return;
  }

  cartItemsEl.innerHTML = CART.map(it => {
    const addonsLine = it.addons?.length
      ? `<div style="font-size:12px; opacity:.8; margin-top:2px">
           + ${it.addons.map(a=>`${esc(a.label)} (${fmtLv(a.price)})`).join(", ")}
         </div>` : "";
    return `
      <div class="cart-item">
        <img src="${esc(it.img||"")}" alt="${esc(it.baseName || it.name)}">
        <div>
          <div class="name">${esc(it.baseName || it.name)}</div>
          ${addonsLine}
          <div class="price" style="margin-top:4px">
            ${fmtLv(it.price)} <span style="opacity:.75">(${fmtEur(it.price)})</span>
          </div>
        </div>
        <div><button class="add-btn" data-remove="${it._id}">‚úï</button></div>
      </div>`;
  }).join("");

  cartItemsEl.querySelectorAll("[data-remove]").forEach((btn)=>{
    btn.addEventListener("click", ()=>{
      const id = btn.getAttribute("data-remove");
      const i = CART.findIndex(x => String(x._id) === id);
      if (i>=0){ CART.splice(i,1); updateCartUI(); }
    });
  });

  const total = CART.reduce((s, x)=> s + (Number(x.price)||0), 0);
  if (cartTotal) cartTotal.textContent = `${fmtLv(total)}  (${fmtEur(total)})`;
  if (cartTotalRow) cartTotalRow.style.display = "";
  if (orderNowBtn) orderNowBtn.disabled = false;
  if (noteWrapper) noteWrapper.style.display = "block";

  persistCartSnapshot();

  if (orderNoteEl && !orderNoteEl.dataset.bound) {
    orderNoteEl.addEventListener("input", () => {
      localStorage.setItem(LS_ORDER_NOTE, orderNoteEl.value);
    });
    orderNoteEl.dataset.bound = "1";
  }
}

function restoreOrderNote(){
  if (orderNoteEl){
    orderNoteEl.value = localStorage.getItem(LS_ORDER_NOTE) || "";
  }
}

function persistCartSnapshot(){
  try{
    const itemsSnapshot = CART.map(({_id, name, baseName, price, basePrice, img, addons}) => ({
      _id, name, baseName, price, basePrice, img, addons: addons || []
    }));
    const total = CART.reduce((s, x)=> s + (Number(x.price)||0), 0);
    localStorage.setItem(LS_CART_ITEMS, JSON.stringify(itemsSnapshot));
    localStorage.setItem(LS_CART_TOTAL, String(total));
    if (orderNoteEl) localStorage.setItem(LS_ORDER_NOTE, orderNoteEl.value || "");
  }catch(e){ console.warn("LS error:", e); }
}

function restoreCartFromLS() {
  try {
    const raw = localStorage.getItem(LS_CART_ITEMS);
    const items = JSON.parse(raw || "[]");

    if (Array.isArray(items) && items.length > 0) {
      items.forEach(it => {
        const price = Number(it.price ?? it.basePrice ?? 0);
        const baseName = it.baseName || it.name || "";
        if (!baseName) return; // –ø—Ä–æ–ø—É—Å–∫–∞–º–µ —Å—á—É–ø–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
        CART.push({
          _id: it._id || (Date.now() + "" + Math.random()),
          name: it.name || baseName,
          baseName,
          price,
          basePrice: Number(it.basePrice ?? price),
          img: it.img || "",
          addons: Array.isArray(it.addons) ? it.addons : []
        });
      });
    }

    updateCartUI();
    restoreOrderNote();
  } catch (e) {
    console.warn("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∫–æ–ª–∏—á–∫–∞—Ç–∞ –æ—Ç LocalStorage:", e);
  }
}

/* –û—Ç–≤–∞—Ä—è–Ω–µ/–∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª–∞ */
function openCart(){
  if (!cartOverlay || !cartBtn) return;
  updateCartUI();
  cartOverlay.style.display = "flex";
  cartOverlay.setAttribute("aria-hidden","false");
  cartBtn.setAttribute("aria-expanded","true");
}
function closeCart(){
  if (!cartOverlay || !cartBtn) return;
  cartOverlay.style.display = "none";
  cartOverlay.setAttribute("aria-hidden","true");
  cartBtn.setAttribute("aria-expanded","false");
}
const cartCloseBtn = document.getElementById("cartClose");
if (cartCloseBtn) cartCloseBtn.addEventListener("click", closeCart);
if (cartOverlay) {
  cartOverlay.addEventListener("click", (e)=>{ if(e.target === cartOverlay) closeCart(); });
}
if (cartBtn) cartBtn.addEventListener("click", openCart);
document.addEventListener("keydown", (e)=>{ if (e.key === "Escape" && cartOverlay && cartOverlay.style.display === "flex") closeCart(); });

/* –ü–æ—Ä—ä—á–∞–π —Å–µ–≥–∞ ‚Üí index3.html (–ª–æ–∫–∞–ª–Ω–æ –∏–ª–∏ —É–µ–±) */
if (orderNowBtn){
  orderNowBtn.addEventListener("click", ()=>{
    if (CART.length === 0) return;
    persistCartSnapshot();
    const target = (location.protocol === "file:") ? "file:///E:/BBQ_SITE/index3.html" : "index3.html";
    window.location.href = target;
  });
}

/* ===========================
   üñºÔ∏è –ö–ê–¢–ï–ì–û–†–ò–ò/–ö–ê–¢–ê–õ–û–ì
   =========================== */

/* –ú–∏–Ω–∏–∞—Ç—é—Ä–∏ (—Å–∞–π–¥–±–∞—Ä) */
const CAT_THUMBS = {
  promocii: PROMO_IMG,
  burgeri:"snimki/produkti/1menu/burger.jpg",
  palachinki:"snimki/produkti/1menu/palachinki.jpg",
  strandzhanki:"snimki/produkti/1menu/strandjanka.jpg",
  kartofi:"snimki/produkti/1menu/kartofi.jpg",
  salati:"snimki/produkti/1menu/salata.jpg",
  portsii:"snimki/produkti/1menu/porciq.jpg",
  sosove:"snimki/produkti/1menu/sosove.jpg",
  dobavki:"snimki/produkti/1menu/dobavki.jpg",
  deserti:"snimki/produkti/1menu/desert.jpg",
  bezalkoholni:"snimki/produkti/1menu/bezalkoholno.jpg",
  bira:"snimki/produkti/1menu/bira.jpg",
  hell:"snimki/produkti/1menu/hell.jpg",
  voda:"snimki/produkti/–í–û–î–ê/voda_snimka.jpg",
  gazirana_voda:"snimki/produkti/–ì–ê–ó–ò–†–ê–ù–ê_–í–û–î–ê/gaziranavoda_snimka.jpg",
  fanta:"snimki/produkti/–§–ê–ù–¢–ê/fanta_logo.jpg",
  studen_chai:"snimki/produkti/–°–¢–£–î–ï–ù_–ß–ê–ô/studen_chai_logo.jpg",
  kola:"snimki/produkti/–ö–û–õ–ê/kola_logo.jpg",
  sok:"snimki/produkti/–°–û–ö/cappy_logo.jpg",
  airqn:"snimki/produkti/–ê–ô–†–ê–ù/vereq_logo.jpg",
  xixo:"snimki/produkti/–•–ò–•–û/xixo_logo.jpg"
};

/* === –î–û–ë–ê–í–ö–ò (—É–Ω–∏–≤–µ—Ä—Å–∞–ª–Ω–∏) === */
const ADDONS = {
  pitka:   { code:"pitka",   label:"–ü–∏—Ç–∫–∞",          price:1.50 },
  raz:     { code:"raz",     label:"–†–∞–∑—è–¥–∫–∞ 100 –≥—Ä", price:1.50 },
  ketchup: { code:"ketchup", label:"–ö–µ—Ç—á—É–ø",      price:0 },
  mayo:    { code:"mayo",    label:"–ú–∞–π–æ–Ω–µ–∑–∞",    price:0 },
  mustard: { code:"mustard", label:"–ì–æ—Ä—á–∏—Ü–∞",     price:0 },
  chili:   { code:"chili",   label:"–õ—é—Ç–æ",        price:0 },
  sharena: { code:"sharena", label:"–®–∞—Ä–µ–Ω–∞ —Å–æ–ª",  price:0 },
};

/* –ö–∞—Ç–∞–ª–æ–≥ —Å —Ü–µ–Ω–∏ –≤ –ª–≤. */
const CATALOG = {
  burgeri:{title:"–°–ê–ù–î–í–ò–ß–ò",items:[
    {name:"–ö–û–ù–°–ö–ê –ü–õ–ï–°–ö–ê–í–ò–¶–ê", price:9.00, img:"snimki/produkti/2menu/konski.jpg",
      desc:"–ö–æ–Ω—Å–∫–æ –º–µ—Å–æ –Ω–∞ –∂–∞—Ä —Å—ä—Å —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏, —Ç—Ä–∏ –≤–∏–¥–∞ —Å–æ—Å–æ–≤–µ (–∫–µ—Ç—á—É–ø, –º–∞–π–æ–Ω–µ–∑–∞, –≥–æ—Ä—á–∏—Ü–∞), –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∫–∏ –∏ –ø—Ä—è—Å–Ω–∞ –ø–∏—Ç–∫–∞ (—Å–∞–º—É–Ω)."},
    {name:"–¢–ï–õ–ï–®–ö–ê –ü–õ–ï–°–ö–ê–í–ò–¶–ê", price:9.00, img:"snimki/produkti/2menu/sharska.jpg",
      desc:"–¢–µ–ª–µ—à–∫–æ –º–ª—è–Ω–æ –º–µ—Å–æ –Ω–∞ –∂–∞—Ä —Å—ä—Å —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏, —Ç—Ä–∏ –≤–∏–¥–∞ —Å–æ—Å–æ–≤–µ (–∫–µ—Ç—á—É–ø, –º–∞–π–æ–Ω–µ–∑–∞, –≥–æ—Ä—á–∏—Ü–∞), –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∫–∏ –∏ –ø—Ä—è—Å–Ω–∞ –ø–∏—Ç–∫–∞ (—Å–∞–º—É–Ω)."},
    {name:"–®–ê–†–°–ö–ê –ü–õ–ï–°–ö–ê–í–ò–¶–ê", price:9.50, img:"snimki/produkti/2menu/sharska.jpg",
      desc:"–¢–µ–ª–µ—à–∫–æ –º–ª—è–Ω–æ –º–µ—Å–æ —Å –∫–∞—à–∫–∞–≤–∞–ª –Ω–∞ –∂–∞—Ä —Å—ä—Å —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏, —Ç—Ä–∏ –≤–∏–¥–∞ —Å–æ—Å–æ–≤–µ (–∫–µ—Ç—á—É–ø, –º–∞–π–æ–Ω–µ–∑–∞, –≥–æ—Ä—á–∏—Ü–∞), –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∫–∏ –∏ –ø—Ä—è—Å–Ω–∞ –ø–∏—Ç–∫–∞ (—Å–∞–º—É–Ω)."},
    {name:"–°–í–ò–ù–°–ö–ê –í–ï–®–ê–õ–ò–¶–ê", price:9.00, img:"snimki/produkti/2menu/sharska.jpg",
      desc:"–ö—Ä–µ—Ö–∫–æ —Å–≤–∏–Ω—Å–∫–æ –∫–æ–Ω—Ç—Ä–∞—Ñ–∏–ª–µ –Ω–∞ –∂–∞—Ä —Å—ä—Å —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏, —Ç—Ä–∏ –≤–∏–¥–∞ —Å–æ—Å–æ–≤–µ (–∫–µ—Ç—á—É–ø, –º–∞–π–æ–Ω–µ–∑–∞, –≥–æ—Ä—á–∏—Ü–∞), –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∫–∏ –∏ –ø—Ä—è—Å–Ω–∞ –ø–∏—Ç–∫–∞ (—Å–∞–º—É–Ω)."},
    {name:"–ü–ò–õ–ï–®–ö–ò –°–¢–ï–ö", price:9.00, img:"snimki/produkti/2menu/pileshkistek.jpg",
      desc:"–ü–∏–ª–µ—à–∫–æ —Ñ–∏–ª–µ –Ω–∞ –∂–∞—Ä —Å—ä—Å —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏, —Ç—Ä–∏ –≤–∏–¥–∞ —Å–æ—Å–æ–≤–µ (–∫–µ—Ç—á—É–ø, –º–∞–π–æ–Ω–µ–∑–∞, –≥–æ—Ä—á–∏—Ü–∞), –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∫–∏ –∏ –ø—Ä—è—Å–Ω–∞ –ø–∏—Ç–∫–∞ (—Å–∞–º—É–Ω)."},
    {name:"–í–ï–ì–ï–¢–ê–†–ò–ê–ù–°–ö–ò", price:5.00, img:"snimki/produkti/2menu/vegan.jpg",
      desc:"–°–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏ , –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∫–∏ –∏ –ø—Ä—è—Å–Ω–∞ –ø–∏—Ç–∫–∞ (—Å–∞–º—É–Ω)."},
    {name:"–î–í–û–ô–ù–ê –®–ê–†–°–ö–ê –ü–õ–ï–°–ö–ê–í–ò–¶–ê", price:12.50, img:"snimki/produkti/2menu/sharska.jpg",
      desc:"–î–≤–æ–π–Ω–∞ —Ç–µ–ª–µ—à–∫–∞ –ø–ª–µ—Å–∫–∞–≤–∏—Ü–∞ —Å –∫–∞—à–∫–∞–≤–∞–ª –Ω–∞ –∂–∞—Ä —Å—ä—Å —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏, –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∫–∏ –∏ –ø—Ä—è—Å–Ω–∞ –ø–∏—Ç–∫–∞ (—Å–∞–º—É–Ω)."},
    {name:"–î–í–û–ô–ù–ê –ö–û–ù–°–ö–ê –ü–õ–ï–°–ö–ê–í–ò–¶–ê", price:12.00, img:"snimki/produkti/2menu/konski.jpg",
      desc:"–ú–ª—è–Ω–æ –∫–æ–Ω—Å–∫–æ –º–µ—Å–æ –Ω–∞ –∂–∞—Ä —Å—ä—Å —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏, –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∫–∏ –∏ –ø—Ä—è—Å–Ω–∞ –ø–∏—Ç–∫–∞ (—Å–∞–º—É–Ω)."},
    {name:"–î–í–û–ô–ù–ê –°–í–ò–ù–°–ö–ê –í–ï–®–ê–õ–ò–¶–ê", price:12.00, img:"snimki/produkti/2menu/sharska.jpg",
      desc:"–î–≤–æ–π–Ω–æ —Å–≤–∏–Ω—Å–∫–æ –∫–æ–Ω—Ç—Ä–∞—Ñ–∏–ª–µ –Ω–∞ –∂–∞—Ä —Å—ä—Å —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏, –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∫–∏ –∏ –ø—Ä—è—Å–Ω–∞ –ø–∏—Ç–∫–∞ (—Å–∞–º—É–Ω)."},
    {name:"–î–í–û–ï–ù –ü–ò–õ–ï–®–ö–ò –°–¢–ï–ö", price:12.00, img:"snimki/produkti/2menu/pileshkistek.jpg",
      desc:"–î–≤–æ–π–Ω–æ –ø–∏–ª–µ—à–∫–æ —Ñ–∏–ª–µ –Ω–∞ –∂–∞—Ä —Å—ä—Å —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏, –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∫–∏ –∏ –ø—Ä—è—Å–Ω–∞ –ø–∏—Ç–∫–∞ (—Å–∞–º—É–Ω)."},
    {name:"–î–í–û–ô–ù–ê –¢–ï–õ–ï–®–ö–ê –ü–õ–ï–°–ö–ê–í–ò–¶–ê", price:12.00, img:"snimki/produkti/2menu/sharska.jpg",
      desc:"–î–≤–æ–π–Ω–∞ —Ç–µ–ª–µ—à–∫–∞ –ø–ª–µ—Å–∫–∞–≤–∏—Ü–∞ –Ω–∞ –∂–∞—Ä —Å—ä—Å —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏, –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∫–∏ –∏ –ø—Ä—è—Å–Ω–∞ –ø–∏—Ç–∫–∞ (—Å–∞–º—É–Ω)."},
    {name:"–ë–£–†–ì–ï–† –° –î–™–†–ü–ê–ù–û –¢–ï–õ–ï–®–ö–û", price:12.50, img:"snimki/produkti/2menu/durpano.jpg",
      desc:"–î—ä—Ä–ø–∞–Ω–æ —Ç–µ–ª–µ—à–∫–æ –Ω–∞ –∂–∞—Ä —Å—ä—Å —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏, –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∫–∏ –∏ –ø—Ä—è—Å–Ω–∞ –ø–∏—Ç–∫–∞ (—Å–∞–º—É–Ω)."}
  ]},
  palachinki:{
    title:"–ü–ê–õ–ê–ß–ò–ù–ö–ò",
    groups:[
      { heading:"–°–õ–ê–î–ö–ò", items:[
        {name:"–ü–ê–õ–ê–ß–ò–ù–ö–ê –°–™–° NUCREMA –®–û–ö–û–õ–ê–î",price:5.00,img:"snimki/produkti/–ü–ê–õ–ê–ß–ò–ù–ö–ò/shokolad.jpg"},
        {name:"–ü–ê–õ–ê–ß–ò–ù–ö–ê –°–™–° NUCREMA –®–û–ö–û–õ–ê–î –ò –ë–ê–ù–ê–ù",price:6.00,img:"snimki/produkti/–ü–ê–õ–ê–ß–ò–ù–ö–ò/shokoladibanan.png"},
        {name:"–ü–ê–õ–ê–ß–ò–ù–ö–ê –° –ú–ï–î –ò –û–†–ï–•–ò",price:5.50,img:"snimki/produkti/–ü–ê–õ–ê–ß–ò–ù–ö–ò/mediorehi.png"},
        {name:"–ü–ê–õ–ê–ß–ò–ù–ö–ê –°–™–° –°–õ–ê–î–ö–û –û–¢ –ë–û–†–û–í–ò–ù–ö–ò",price:5.00,img:"snimki/produkti/–ü–ê–õ–ê–ß–ò–ù–ö–ò/borovinki.png"},
        {name:"–ü–ê–õ–ê–ß–ò–ù–ö–ê –°–™–° –°–õ–ê–î–ö–û –û–¢ –ü–†–ê–°–ö–û–í–ê",price:5.00,img:"snimki/produkti/–ü–ê–õ–ê–ß–ò–ù–ö–ò/praskovi.png"},
        {name:"–ü–ê–õ–ê–ß–ò–ù–ö–ê –°–™–° –°–õ–ê–î–ö–û –û–¢ –Ø–ì–û–î–ò",price:5.00,img:"snimki/produkti/–ü–ê–õ–ê–ß–ò–ù–ö–ò/qgodi.png"}
      ]},
      { heading:"–°–û–õ–ï–ù–ò", items:[
        {name:"–ü–ê–õ–ê–ß–ò–ù–ö–ê –° –ö–ê–®–ö–ê–í–ê–õ –ò –ë–ï–ö–û–ù",price:6.00,img:"snimki/produkti/–ü–ê–õ–ê–ß–ò–ù–ö–ò/kashkavalibekon.png"},
        {name:"–°–ò–†–ï–ù–ï –ò –°–õ–ê–î–ö–û",price:5.50,img:"snimki/produkti/–ü–ê–õ–ê–ß–ò–ù–ö–ò/sirene.png"},
        {name:"–ü–ê–õ–ê–ß–ò–ù–ö–ê –°–™–° –°–ò–†–ï–ù–ï",price:5.00,img:"snimki/produkti/–ü–ê–õ–ê–ß–ò–ù–ö–ò/sirene.png"},
        {name:"–ü–ê–õ–ê–ß–ò–ù–ö–ê –°–™–° –ö–ê–®–ö–ê–í–ê–õ",price:5.50,img:"snimki/produkti/–ü–ê–õ–ê–ß–ò–ù–ö–ò/kashkaval.png"},
        {name:"–ü–ê–õ–ê–ß–ò–ù–ö–ê –°–™–° –°–ò–†–ï–ù–ï –ò –ö–ê–®–ö–ê–í–ê–õ",price:6.00,img:"snimki/produkti/–ü–ê–õ–ê–ß–ò–ù–ö–ò/kashkavalisirene.png"},
        {name:"–ü–ê–õ–ê–ß–ò–ù–ö–ê –° –ú–ê–°–õ–û",price:4.50,img:"snimki/produkti/–ü–ê–õ–ê–ß–ò–ù–ö–ò/maslo.png"}
      ]}
    ]
  },
  strandzhanki:{ title:"–°–¢–†–ê–ù–î–ñ–ê–ù–ö–ò", items:[
    {name:"–¢–ï–õ–ï–®–ö–ê –°–¢–†–ê–ù–î–ñ–ê–ù–ö–ê",price:5.00,img:CAT_THUMBS.strandzhanki},
    {name:"–°–í–ò–ù–°–ö–ê –°–¢–†–ê–ù–î–ñ–ê–ù–ö–ê",price:5.00,img:CAT_THUMBS.strandzhanki}
  ]},
  kartofi:{ title:"–ö–ê–†–¢–û–§–ò", items:[
    {name:"–ü–™–†–ñ–ï–ù–ò –ö–ê–†–¢–û–§–ò 200 –ì–†–ê–ú–ê",price:4.00,img:"snimki/produkti/–ö–ê–†–¢–û–§–ò/kartofi.jpg"},
    {name:"–ö–ê–†–¢–û–§–ò –° –ß–ï–î–™–† –ò –ë–ï–ö–û–ù",price:6.50,img:"snimki/produkti/–ö–ê–†–¢–û–§–ò/kartofisbekonichedur.jpg"},
    {name:"–ö–ê–†–¢–û–§–ò –° –ß–ï–î–™–†",price:5.00,img:"snimki/produkti/–ö–ê–†–¢–û–§–ò/kartofischedur.jpg"}
  ]},
  salati:{
    title:"–°–ê–õ–ê–¢–ò",
    items:[
      {name:"–°–ê–õ–ê–¢–ê –¶–ï–ó–ê–†",price:8.50,img:CAT_THUMBS.salati,
       desc:"–ê–π—Å–±–µ—Ä–≥, —á–µ—Ä–∏ –¥–æ–º–∞—Ç–∏, –∫—Ä—É—Ç–æ–Ω–∏, —Å–æ—Å –¶–µ–∑–∞—Ä, –ø–∏–ª–µ—à–∫–æ —Ñ–∏–ª–µ, –ø–∞—Ä–º–µ–∑–∞–Ω"}
    ]
  },
  portsii:{ title:"–ü–û–†–¶–ò–ò", items:[
    {name:"–¢–ï–õ–ï–®–ö–ê –ü–õ–ï–°–ö–ê–í–ò–¶–ê –ü–û–†–¶–ò–Ø",price:11.50,img:"snimki/produkti/–ü–û–†–¶–ò–ò/sharsko.jpg",
      desc:"–ú–ª—è–Ω–æ —Ç–µ–ª–µ—à–∫–æ –º–µ—Å–æ –Ω–∞ —Å–∫–∞—Ä–∞, —Å—ä—Å —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏ –∏ –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∏. –ë–µ–∑ –ø–∏—Ç–∫–∞ –∏ –±–µ–∑ —Ä–∞–∑—è–¥–∫–∞. ~550 –≥."},
    {name:"–ö–û–ù–°–ö–ê –ü–õ–ï–°–ö–ê–í–ò–¶–ê –ü–û–†–¶–ò–Ø",price:11.50,img:"snimki/produkti/–ü–û–†–¶–ò–ò/sharsko.jpg",
      desc:"–ü—Ä—è—Å–Ω–æ –º–ª—è–Ω–æ –∫–æ–Ω—Å–∫–æ –Ω–∞ –∂–∞—Ä, —Å—ä—Å —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏ –∏ –∫–∞—Ä—Ç–æ—Ñ–∏. –ë–µ–∑ –ø–∏—Ç–∫–∞ –∏ –±–µ–∑ —Ä–∞–∑—è–¥–∫–∞. ~550 –≥."},
    {name:"–ü–ò–õ–ï–®–ö–û –§–ò–õ–ï –ü–û–†–¶–ò–Ø",price:11.00,img:"snimki/produkti/–ü–û–†–¶–ò–ò/pileshko.jpg",
      desc:"–ü—Ä—è—Å–Ω–æ –ø–∏–ª–µ—à–∫–æ —Ñ–∏–ª–µ –Ω–∞ –∂–∞—Ä —Å –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞ –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∏ –∏ —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏. –ë–µ–∑ –ø–∏—Ç–∫–∞ –∏ –±–µ–∑ —Ä–∞–∑—è–¥–∫–∞. ~550 –≥."},
    {name:"–°–í–ò–ù–°–ö–û –§–ò–õ–ï –ü–û–†–¶–ò–Ø",price:11.00,img:"snimki/produkti/–ü–û–†–¶–ò–ò/svinsko.jpg",
      desc:"–ö—Ä–µ—Ö–∫–æ —Å–≤–∏–Ω—Å–∫–æ –∫–æ–Ω—Ç—Ä–∞ —Ñ–∏–ª–µ –Ω–∞ –∂–∞—Ä —Å –∫–∞—Ä—Ç–æ—Ñ–∏ –∏ —Å–≤–µ–∂–∞ –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞. –ë–µ–∑ –ø–∏—Ç–∫–∞ –∏ –±–µ–∑ —Ä–∞–∑—è–¥–∫–∞. ~550 –≥."},
    {name:"–¢–ï–õ–ï–®–ö–ò –ö–ï–ë–ê–ü–ß–ï–¢–ê –ü–û–†–¶–ò–Ø",price:9.50,img:"snimki/produkti/–ü–û–†–¶–ò–ò/kebapche.jpg",
      desc:"–ê—Ä–æ–º–∞—Ç–Ω–∏ —Ç–µ–ª–µ—à–∫–∏ –∫–µ–±–∞–ø—á–µ—Ç–∞ –Ω–∞ –∂–∞—Ä —Å –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∏ –∏ —Å–∞–ª–∞—Ç–∞. –ë–µ–∑ –ø–∏—Ç–∫–∞ –∏ –±–µ–∑ —Ä–∞–∑—è–¥–∫–∞. ~550 –≥."},
    {name:"–®–ê–†–°–ö–ê –ü–õ–ï–°–ö–ê–í–ò–¶–ê –ü–û–†–¶–ò–Ø",price:12.50,img:"snimki/produkti/–ü–û–†–¶–ò–ò/sharsko.jpg",
      desc:"–¢–µ–ª–µ—à–∫–∞ –ø–ª–µ—Å–∫–∞–≤–∏—Ü–∞ —Å –∫–∞—à–∫–∞–≤–∞–ª, –≥–∞—Ä–Ω–∏—Ä–∞–Ω–∞ —Å –ø—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∏ –∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏. –ë–µ–∑ –ø–∏—Ç–∫–∞ –∏ –±–µ–∑ —Ä–∞–∑—è–¥–∫–∞. ~550 –≥."}
  ]},
  dobavki:{ title:"–î–û–ë–ê–í–ö–ò", items:[
    {name:"–°–ò–†–ï–ù–ï 100 –ì–†–ê–ú–ê",   price:1.50, img:"snimki/produkti/–î–û–ë–ê–í–ö–ò/sirene100grama.png"},
    {name:"–ö–ê–®–ö–ê–í–ê–õ 100 –ì–†–ê–ú–ê", price:1.50, img:"snimki/produkti/–î–û–ë–ê–í–ö–ò/kashkaval100grama.png"},
    {name:"–†–ê–ó–Ø–¢–ö–ê",            price:1.00, img:"snimki/produkti/–î–û–ë–ê–í–ö–ò/razqtka.png"},
    {name:"–ú–ï–°–û –î–û–ë–ê–í–ö–ê",       price:4.00, img:"snimki/produkti/–î–û–ë–ê–í–ö–ò/meso.jpg"},
    {name:"–ü–ò–¢–ö–ê",              price:1.50, img:"snimki/produkti/–î–û–ë–ê–í–ö–ò/pitka2.jpg"}
  ]},
  sosove:{ title:"–°–û–°–û–í–ï", items:[
    {name:"–î–û–ú–ê–®–ù–ê –†–ê–ó–Ø–î–ö–ê 100–ì–†", price:1.50, img:CAT_THUMBS.sosove},
    {name:"–î–û–ú–ê–®–ù–ê –ú–ê–ô–û–ù–ï–ó–ê",     price:1.50, img:CAT_THUMBS.sosove},
    {name:"–õ–Æ–¢–ï–ù–ò–¶–ê",             price:1.50, img:CAT_THUMBS.sosove},
    {name:"–ö–ï–¢–ß–£–ü",               price:1.00, img:CAT_THUMBS.sosove},
    {name:"–ì–û–†–ß–ò–¶–ê",              price:1.00, img:CAT_THUMBS.sosove},
    {name:"–°–û–° –¶–ï–ó–ê–†",            price:1.50, img:CAT_THUMBS.sosove}
  ]},
  deserti:{ title:"–î–ï–°–ï–†–¢–ò", items:[
    {name:"–õ–ï–ö –î–ï–°–ï–†–¢ –° –ß–ò–Ø, –ú–Æ–°–õ–ò –ò –°–£–®–ï–ù–ò –ü–õ–û–î–û–í–ï",price:4.50,img:CAT_THUMBS.deserti},
    {name:"–õ–ï–ö –î–ï–°–ï–†–¢ –° –ß–ò–Ø, –ú–Æ–°–õ–ò –ò –°–õ–ê–î–ö–û –û–¢ –ë–û–†–û–í–ò–ù–ö–ò",price:4.50,img:CAT_THUMBS.deserti}
  ]},
  bezalkoholni:{ title:"–ë–ï–ó–ê–õ–ö–û–•–û–õ–ù–ò", items:[
    {name:"–ö–û–õ–ê –ö–ï–ù",price:2.00,img:CAT_THUMBS.bezalkoholni},
    {name:"–§–ê–ù–¢–ê –ü–û–†–¢–û–ö–ê–õ –ö–ï–ù",price:2.00,img:CAT_THUMBS.bezalkoholni},
    {name:"–ö–û–ö–ê –ö–û–õ–ê –ë–£–¢–ò–õ–ö–ê",price:2.50,img:CAT_THUMBS.bezalkoholni},
    {name:"–§–ê–ù–¢–ê –ü–û–†–¢–û–ö–ê–õ –ë–£–¢–ò–õ–ö–ê",price:2.50,img:CAT_THUMBS.bezalkoholni},
    {name:"–°–ü–†–ê–ô–¢ –ë–£–¢–ò–õ–ö–ê",price:2.50,img:CAT_THUMBS.bezalkoholni},
    {name:"–°–¢–£–î–ï–ù –ß–ê–ô",price:2.50,img:CAT_THUMBS.bezalkoholni},
    {name:"–ö–ê–ü–ò –ü–™–õ–ü–ò",price:2.50,img:CAT_THUMBS.bezalkoholni},
    {name:"–ö–ê–ü–ò –ö–£–¢–ò–Ø",price:1.70,img:CAT_THUMBS.bezalkoholni},
    {name:"–°–û–î–ê –ë–£–¢–ò–õ–ö–ê",price:1.90,img:CAT_THUMBS.bezalkoholni},
    {name:"–ú–ê–õ–ö–ê –ú–ò–ù–ï–†–ê–õ–ù–ê –í–û–î–ê",price:1.50,img:CAT_THUMBS.bezalkoholni},
    {name:"–ì–û–õ–Ø–ú–ê –ú–ò–ù–ï–†–ê–õ–ù–ê –í–û–î–ê",price:2.00,img:CAT_THUMBS.bezalkoholni},
    {name:"–ö–ê–ü–ò –õ–ò–ú–û–ù–ê–î–ê",price:2.50,img:CAT_THUMBS.bezalkoholni},
    {name:"–¢–û–ù–ò–ö –ë–£–¢–ò–õ–ö–ê",price:1.90,img:CAT_THUMBS.bezalkoholni}
  ]},
  bira:{ title:"–ë–ò–†–ê", items:[
    {name:"–ë–ò–†–ê –ö–û–†–û–ù–ê",price:3.50,img:CAT_THUMBS.bira},
    {name:"–•–ê–ô–ù–ò–ö–ï–ù",price:4.00,img:CAT_THUMBS.bira},
    {name:"–°–¢–ï–õ–ê –ê–†–¢–û–ê",price:4.50,img:CAT_THUMBS.bira}
  ]},
  hell:{
    title:"HELL",
    view:"gallery",
    hellPrice:2.00,
    groups:[
      { heading:"HELL -250–º–ª", images:[
          "snimki/hell_sminki/normal/hell_apple.jpg",
          "snimki/hell_sminki/normal/hell_clasic.jpg",
          "snimki/hell_sminki/normal/hell_classic.jpg",
          "snimki/hell_sminki/normal/hell_redgrape.jpg",
          "snimki/hell_sminki/normal/hell_watermelon.jpg"
      ]},
      { heading:"ICE COFFE HELL -250 –º–ª", images:[
          "snimki/hell_sminki/ice_coffe/ice_coffe_capochino.png",
          "snimki/hell_sminki/ice_coffe/ice_coffe_caramel.png",
          "snimki/hell_sminki/ice_coffe/ice_coffe_coconut.png",
          "snimki/hell_sminki/ice_coffe/ice_coffe_doubleespresso.png",
          "snimki/hell_sminki/ice_coffe/ice_coffe_late.png",
          "snimki/hell_sminki/ice_coffe/ice_coffe_pinklatte.png",
          "snimki/hell_sminki/ice_coffe/ice_coffe_vanilia.png",
          "snimki/hell_sminki/ice_hell_distachio.png"
      ]}
    ]
  },
  voda:{
    title:"–í–û–î–ê",
    view:"water2",
    groups:[
      { heading:"Devin", pair:[
          {src:"snimki/produkti/–í–û–î–ê/golqma_devin.jpg", label:"–ì–æ–ª—è–º–∞ –î–µ–≤–∏–Ω -1,5–õ", price:2.00},
          {src:"snimki/produkti/–í–û–î–ê/malka_devin.jpg", label:"–ú–∞–ª–∫–∞ –î–µ–≤–∏–Ω -500–º–ª",  price:1.50}
      ]},
      { heading:"–ë–∞–Ω–∫—è", pair:[
          {src:"snimki/produkti/–í–û–î–ê/golqma_bankq.jpg", label:"–ì–æ–ª—è–º–∞ –ë–∞–Ω–∫—è -1,5–õ", price:2.00},
          {src:"snimki/produkti/–í–û–î–ê/malka_bankq.jpg", label:"–ú–∞–ª–∫–∞ –ë–∞–Ω–∫—è -500–º–ª",  price:1.50}
      ]}
    ]
  },
  gazirana_voda:{
    title:"–ì–ê–ó–ò–†–ê–ù–ê –í–û–î–ê",
    view:"water2",
    groups:[
      { heading:"–ú–∞—Ä–∫–∏", pair:[
          {src:"snimki/produkti/–ì–ê–ó–ò–†–ê–ù–ê_–í–û–î–ê/shveps.jpg",  label:"Schweppes -500–º–ª", price:1.90},
          {src:"snimki/produkti/–ì–ê–ó–ò–†–ê–ù–ê_–í–û–î–ê/sprait.jpg",  label:"Sprite -500–º–ª",    price:1.90}
      ]}
    ]
  },
  fanta:{
    title:"–§–ê–ù–¢–ê",
    items:[
      {name:"–§–∞–Ω—Ç–∞ –ü–æ—Ä—Ç–æ–∫–∞–ª -330–º–ª",      price:2.00, img:"snimki/produkti/–§–ê–ù–¢–ê/fanta_portokal.jpg"},
      {name:"–§–∞–Ω—Ç–∞ –õ–∏–º–æ–Ω -330–º–ª",         price:2.00, img:"snimki/produkti/–§–ê–ù–¢–ê/fanta_lemon.jpg"},
      {name:"–§–∞–Ω—Ç–∞ –õ–∞–π—á–∏ -330–º–ª",         price:2.00, img:"snimki/produkti/–§–ê–ù–¢–ê/fanta_laici.jpg"},
      {name:"–§–∞–Ω—Ç–∞ Tutti Frutti -330–º–ª",  price:2.00, img:"snimki/produkti/–§–ê–ù–¢–ê/fanta_tutti.jpg"},
      {name:"–§–∞–Ω—Ç–∞ –ó–µ–ª–µ–Ω–∞ —è–±—ä–ª–∫–∞ 330–º–ª", price:2.00, img:"snimki/produkti/–§–ê–ù–¢–ê/fanta_greenapple.jpg"},
      {name:"–§–∞–Ω—Ç–∞ –ë–æ—Ä–æ–≤–∏–Ω–∫–∞ -330–º–ª",     price:2.00, img:"snimki/produkti/–§–ê–ù–¢–ê/sinq_blueberry.jpg"}
    ]
  },
  studen_chai:{
    title:"–°–¢–£–î–ï–ù –ß–ê–ô",
    items:[
      { name:"Fuze Tea –ì–æ—Ä—Å–∫–∏ –ø–ª–æ–¥ -500–º–ª", price:2.50, img:"snimki/produkti/–°–¢–£–î–ï–ù_–ß–ê–ô/fuze_tea_forest_frut.jpg" },
      { name:"Fuze Tea –ü—Ä–∞—Å–∫–æ–≤–∞ -500–º–ª",    price:2.50, img:"snimki/produkti/–°–¢–£–î–ï–ù_–ß–ê–ô/fuze_tea_praskova.jpg" }
    ]
  },
  kola:{
    title:"–ö–û–õ–ê",
    items:[
      {name:"–ö–æ–ª–∞ –ö–µ–Ω -330–º–ª",        price:2.00, img:"snimki/produkti/–ö–û–õ–ê/kolaken.jpg"},
      {name:"–ö–æ–ª–∞ –ö–µ–Ω Zero -330–º–ª",   price:2.00, img:"snimki/produkti/–ö–û–õ–ê/kolakenzero.jpg"},
      {name:"–ö–æ–ª–∞ –ü–í–¶ -500–º–ª",        price:2.50, img:"snimki/produkti/–ö–û–õ–ê/kolapvc.jpg"},
      {name:"–ö–æ–ª–∞ –ü–í–¶ Zero -500–º–ª",   price:2.50, img:"snimki/produkti/–ö–û–õ–ê/kolapvczero.jpg"}
    ]
  },
  sok:{
    title:"–°–û–ö",
    items:[
      {name:"Cappy –ü–æ—Ä—Ç–æ–∫–∞–ª -500–º–ª", price:2.50, img:"snimki/produkti/–°–û–ö/cappy_orange.jpg"},
      {name:"Cappy –õ–∏–º–æ–Ω -500–º–ª",    price:2.50, img:"snimki/produkti/–°–û–ö/cappy_lemon.jpg"}
    ]
  },
  airqn:{
    title:"–ê–ô–†–Ø–ù",
    groups:[
      { heading:"–í–µ—Ä–µ—è", items:[
          {name:"–ê–π—Ä—è–Ω –í–µ—Ä–µ—è –ì–æ–ª—è–º -480–º–ª", price:2.00, img:"snimki/produkti/–ê–ô–†–ê–ù/airan_vereq_golqm.jpg"},
          {name:"–ê–π—Ä—è–Ω –í–µ—Ä–µ—è –ú–∞–ª—ä–∫ -300–º–ª", price:1.50, img:"snimki/produkti/–ê–ô–†–ê–ù/airan_vereq_maluk.jpg"}
      ]},
      { heading:"Meggle", items:[
          {name:"–ì–æ–ª—è–º –ê–π—Ä—è–Ω Meggle –ë—É—Ç–∏–ª–∫–∞ 500 –º–ª", price:2.80, img:"snimki/produkti/–ê–ô–†–ê–ù/megle_airan_butilka.jpg"},
          {name:"–ê–π—Ä—è–Ω Meggle –ö–æ—Ñ–∏—á–∫–∞ -300–º–ª",    price:2.00, img:"snimki/produkti/–ê–ô–†–ê–ù/megle_airan_kofa.jpg"},
          {name:"–ê–π—Ä—è–Ω Meggle –ü–ª–æ–¥–æ–≤ –ö–æ—Ñ–∏—á–∫–∞ -330–º–ª",  price:3.00, img:"snimki/produkti/–ê–ô–†–ê–ù/mwgle_airan_plodov.jpg"}
      ]}
    ]
  },
  xixo:{
    title:"XIXO",
    items:[
      {name:"XIXO Cola -250–º–ª",               price:1.10, img:"snimki/produkti/–•–ò–•–û/xixo_cola.jpg"},
      {name:"XIXO Cherry Cola -250–º–ª",        price:1.10, img:"snimki/produkti/–•–ò–•–û/xixo_cherry_cola.jpg"},
      {name:"XIXO –î–∏–Ω—è -250–º–ª",               price:1.10, img:"snimki/produkti/–•–ò–•–û/xixo_dinq.jpg"},
      {name:"XIXO –ì–æ—Ä—Å–∫–∏ –ø–ª–æ–¥ -250–º–ª",        price:1.10, img:"snimki/produkti/–•–ò–•–û/xixo_gorski_plod.jpg"},
      {name:"XIXO Green Fusion -250–º–ª",       price:1.10, img:"snimki/produkti/–•–ò–•–û/xixo_green_fusion.jpg"},
      {name:"XIXO –ö—Ä—É—à–∞ -250–º–ª",              price:1.10, img:"snimki/produkti/–•–ò–•–û/xixo_krusha.jpg"},
      {name:"XIXO –õ–∏–º–æ–Ω -250–º–ª",              price:1.10, img:"snimki/produkti/–•–ò–•–û/xixo_limon.jpg"},
      {name:"XIXO –ú–∞–Ω–≥–æ –∏ –∞–Ω–∞–Ω–∞—Å -250–º–ª",     price:1.10, img:"snimki/produkti/–•–ò–•–û/xixo_mango_and_pineapple.jpg"},
      {name:"XIXO –†–æ–∑–æ–≤–∞ –ª–∏–º–æ–Ω–∞–¥–∞ -250–º–ª",    price:1.10, img:"snimki/produkti/–•–ò–•–û/xixo_pink_lemonade.jpg"},
      {name:"XIXO –ü—Ä–∞—Å–∫–æ–≤–∞ -250–º–ª",           price:1.10, img:"snimki/produkti/–•–ò–•–û/xixo_praskova.jpg"},
      {name:"XIXO –Ø–≥–æ–¥–∞",                      price:1.10, img:"snimki/produkti/–•–ò–•–û/xixo_qgoda.jpg"},
      {name:"XIXO Tutti Frutti -250–º–ª",       price:1.10, img:"snimki/produkti/–•–ò–•–û/xixo_tuti_fruity.jpg"}
    ]
  }
};


const BASE_CATALOG = typeof structuredClone === "function"
  ? structuredClone(CATALOG)
  : JSON.parse(JSON.stringify(CATALOG));


/* –ü–æ–¥—Ä–µ–¥–±–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ */
const ORDER = [
  "promocii",
  "burgeri","palachinki","strandzhanki","kartofi","salati","portsii","dobavki",
  "hell","voda","gazirana_voda","fanta","studen_chai","kola"
];


/* =====================================================
   ‚òÅÔ∏è –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –æ—Ç –æ–±–ª–∞–∫–∞ (Upstash Redis) + fallback
   ===================================================== */
(async function loadFromCloud(){
  try {
    const r = await fetch("/api/catalog", { cache: "no-store" });
    if (!r.ok) throw new Error("HTTP " + r.status);
    const data = await r.json();

    if (data && typeof data === "object") {
      if (data.CATALOG)    Object.assign(CATALOG, data.CATALOG);
      if (Array.isArray(data.ORDER)) { ORDER.length = 0; ORDER.push(...data.ORDER); }
      if (data.ADDONS)     Object.assign(ADDONS, data.ADDONS);
      if (data.cat_thumbs) Object.assign(CAT_THUMBS, data.cat_thumbs);
      console.log("‚úÖ –î–∞–Ω–Ω–∏—Ç–µ —Å–∞ –∑–∞—Ä–µ–¥–µ–Ω–∏ –æ—Ç –æ–±–ª–∞–∫–∞.");
    }
  } catch (e) {
    console.warn("‚òÅÔ∏è –û–±–ª–∞–∫—ä—Ç –µ –Ω–µ–¥–æ—Å—Ç—ä–ø–µ–Ω, –∑–∞—Ä–µ–∂–¥–∞–º –æ—Ç localStorage:", e);
    try {
      const raw = localStorage.getItem("BBQ_MAIN_CATALOG");
      if (!raw) return;
      const data = JSON.parse(raw);
      if (data.CATALOG)    Object.assign(CATALOG, data.CATALOG);
      if (Array.isArray(data.ORDER)) { ORDER.length = 0; ORDER.push(...data.ORDER); }
      if (data.ADDONS)     Object.assign(ADDONS, data.ADDONS);
      if (data.cat_thumbs) Object.assign(CAT_THUMBS, data.cat_thumbs);
      console.log("‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–æ –ª–æ–∫–∞–ª–Ω–æ –∫–æ–ø–∏–µ (offline fallback).");
    } catch (e2) {
      console.warn("‚ö†Ô∏è Local fallback —Å—ä—â–æ –Ω–µ—É—Å–ø–µ—à–µ–Ω:", e2);
    }
  }
})();

function ensureShape(key, shape){
  const c = CATALOG[key] || {};
  if (shape === "water2") {
    if (c.view !== "water2" || !Array.isArray(c.groups)) CATALOG[key] = BASE_CATALOG[key];
  } else if (shape === "gallery") {
    if (c.view !== "gallery" || !Array.isArray(c.groups)) CATALOG[key] = BASE_CATALOG[key];
  } else if (shape === "groups") {
    if (!Array.isArray(c.groups)) CATALOG[key] = BASE_CATALOG[key];
  }
}
ensureShape("voda","water2");
ensureShape("gazirana_voda","water2");
ensureShape("hell","gallery");
ensureShape("palachinki","groups");



const sidebar = document.getElementById("sidebar");
const grid    = document.getElementById("productGrid");
const titleEl = document.getElementById("catTitle");

function showPromosIframe(show){
  // –≤–∏–Ω–∞–≥–∏ –º–∞—Ö–∞–º–µ/—Å–ª–∞–≥–∞–º–µ –∫–ª–∞—Å–∞ –°–ê–ú–û —Ç—É–∫
  if (show) {
    document.body.classList.add('is-promos');
  } else {
    document.body.classList.remove('is-promos');
  }

  // –∞–∫–æ –∏–º–∞—à –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞ –ø—Ä–æ–º–æ —Å–µ–∫—Ü–∏—è—Ç–∞ ‚Äì –ø–æ–∫–∞–∂–∏/—Å–∫—Ä–∏–π –≥–æ
  const sec = document.getElementById('promosSection');
  if (sec) sec.style.display = show ? 'block' : 'none';

  // fail-safe: –∫–æ–≥–∞—Ç–æ –ù–ï —Å–º–µ –≤ –ø—Ä–æ–º–æ –∏–∑–≥–ª–µ–¥,
  // —É–≤–µ—Ä–∏ —Å–µ, —á–µ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ç–µ –±—É—Ç–æ–Ω–∏/–µ–ª–µ–º–µ–Ω—Ç–∏ —Å–∞ –≤–∏–¥–∏–º–∏
  if (!show) {
    const sidebar = document.getElementById('sidebar');
    if (sidebar) sidebar.style.display = ''; // reset
    const cartOverlay = document.getElementById('cartOverlay');
    const cartBtn = document.getElementById('cartBtn');
    if (cartOverlay) cartOverlay.style.display = 'none';
    if (cartBtn)      cartBtn.setAttribute('aria-expanded','false');
  }
}



/* –î–µ–ª–µ–≥–∏—Ä–∞–Ω –∫–ª–∏–∫ –∑–∞ ‚Äû–í—Å–∏—á–∫–æ‚Äú (veg/sauce) ‚Äî —Å—Ç–∞–±–∏–ª–Ω–æ –∑–∞ desktop –∏ mobile */
if (grid){
  grid.addEventListener("click", (e) => {
    const btn = e.target.closest("button.btn-all");
    if (!btn) return;

    e.preventDefault();
    e.stopPropagation();

    const group = btn.dataset.target;            // "veg" –∏–ª–∏ "sauce"
    const card  = btn.closest(".product");       // —Ü—è–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞
    if (!group || !card) return;

    const boxes = Array.from(card.querySelectorAll(`input.addon-checkbox[data-group="${group}"]`));
    if (!boxes.length) return;

    const shouldCheck = !boxes.every(b => b.checked); // –∞–∫–æ –Ω–µ —Å–∞ –≤—Å–∏—á–∫–∏ —á–µ–∫–Ω–∞—Ç–∏ ‚Üí —á–µ–∫–≤–∞–º–µ –≤—Å–∏—á–∫–∏
    for (const b of boxes) {
      b.checked = shouldCheck;
      b.dispatchEvent(new Event("change", { bubbles: true })); // –ø–æ–¥—Å–∏–≥—É—Ä–∏ –ª–æ–≥–∏–∫–∞ –ø–æ change
    }
  });
}


/* –°–∞–π–¥–±–∞—Ä —Ä–µ–Ω–¥–µ—Ä */
if (sidebar){
  sidebar.innerHTML = ORDER.map(key=>{
    const label = (key === "promocii") ? "–ü–†–û–ú–û–¶–ò–ò" : (CATALOG[key].title);
    const img   = CAT_THUMBS[key];
    return `<a class="cat" data-cat="${key}" role="link" tabindex="0" aria-label="${esc(label)}">
              <div class="box" style="background-image:url('${img}')" data-label="${esc(label)}"></div>
            </a>`;
  }).join("");
}

/* pretty label –∑–∞ HELL */
function prettyLabel(src){
  let f = src.split("/").pop().split(".")[0].toLowerCase();
  f = f.replace(/^hell_/,"").replace(/^ice_coffe_/,"").replace(/^ice_hell_/,"");
  const map = {
    apple:"Apple", clasic:"Classic", classic:"Black Cherry",
    redgrape:"Red Grape", watermelon:"Watermelon",
    capochino:"Cappuccino", cappuccino:"Cappuccino", caramel:"Salted Caramel",
    coconut:"Coconut", doubleespresso:"Double Espresso", doublespresso:"Double Espresso",
    late:"Latte", latte:"Latte", pinklatte:"Pink Latte",
    vanilia:"Vanilla", vanilla:"Vanilla", distachio:"Pistachio", pistachio:"Pistachio",
    slimvanilla:"Vanilla"
  };
  if (map[f]) return map[f];
  return f.replace(/[_-]+/g," ").replace(/\b\w/g, m=>m.toUpperCase());
}

const catHasAddons = (cat) => (cat === "portsii" || cat === "burgeri" || cat === "strandzhanki");

/* === –†–ï–ù–î–ï–† –ù–ê –ü–†–û–î–£–ö–¢ === */
function productCardHTML(it, i, withAddons = false) {
  const desc = it.desc ? `<p class="desc">${esc(it.desc)}</p>` : "";

  const pricePlusRow = `
    <div class="price-plus">
      <div class="price-badge">
        <div class="lv">${fmtLv(it.price)}</div>
        <div class="eur">${fmtEur(it.price)}</div>
      </div>
      <button class="add-btn"
        data-name="${(it.name || "").replace(/"/g,"&quot;")}"
        data-price="${it.price}"
        data-img="${it.img}">+</button>
    </div>
  `;

  const mobileTitle = `<h3 class="mobile-title">${esc(it.name)}</h3>`;

  // --- –¥–µ—Å–µ–Ω –±–ª–æ–∫ —Å –¥–æ–±–∞–≤–∫–∏ + –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω "+" –¥–æ —Ü–µ–Ω–∞—Ç–∞ ---
  let addonsBlock = "";
  let wholeAddonsBlock = "";

  if (withAddons) {
    if (current === "burgeri") {
      const isPulled = /–î–™–†–ü–ê–ù–û/i.test(it.name || "");
      const vegList = isPulled
        ? [
            { c:"cheddar", t:"–¢–µ—á–µ–Ω —á–µ–¥—ä—Ä" },
            { c:"bbq",     t:"–ë–∞—Ä–±–µ–∫—é —Å–æ—Å" },
            { c:"car_on",  t:"–ö–∞—Ä–∞–º–µ–ª–∏–∑–∏—Ä–∞–Ω –ª—É–∫" },
            { c:"pickles", t:"–ö–∏—Å–µ–ª–∏ –∫—Ä–∞—Å—Ç–∞–≤–∏—á–∫–∏" },
            { c:"mayo_h",  t:"–î–æ–º–∞—à–Ω–∞ –º–∞–π–æ–Ω–µ–∑–∞" },
            { c:"fries",   t:"–ö–∞—Ä—Ç–æ—Ñ–∫–∏" }
          ]
        : [
            { c:"tomato",   t:"–î–æ–º–∞—Ç" },
            { c:"fries",    t:"–ü—Ä–µ—Å–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∫–∏" },
            { c:"onion",    t:"–ß–µ—Ä–≤–µ–Ω –ª—É–∫" },
            { c:"iceberg",  t:"–ê–π—Å–±–µ—Ä–≥" },
            { c:"razyadka", t:"–†–∞–∑—è–¥–∫–∞" }
          ];

      const sauces = [
        { c:"ketchup", t:"–ö–µ—Ç—á—É–ø" },
        { c:"mayo",    t:"–ú–∞–π–æ–Ω–µ–∑–∞" },
        { c:"mustard", t:"–ì–æ—Ä—á–∏—Ü–∞" },
        { c:"chili",   t:"–õ—é—Ç–æ" }
      ];

      addonsBlock = `
        <div class="addons">
          <div class="hdr">
            –ò–∑–±–µ—Ä–µ—Ç–µ —Å –∫–∞–∫–≤–æ –¥–∞ –±—ä–¥–µ
            <button type="button" class="btn-all" data-target="veg">–í—Å–∏—á–∫–æ</button>
          </div>
          ${vegList.map(x => `
            <label>
              <input type="checkbox" class="addon-checkbox" data-group="veg" data-code="${x.c}" data-price="0"> ${x.t}
            </label>
          `).join("")}
        </div>

        <div class="addons">
          <div class="hdr">
            –°–æ—Å–æ–≤–µ
            <button type="button" class="btn-all" data-target="sauce">–í—Å–∏—á–∫–æ</button>
          </div>
          ${sauces.map(x => `
            <label>
              <input type="checkbox" class="addon-checkbox" data-group="sauce" data-code="${x.c}" data-price="0"> ${x.t}
            </label>
          `).join("")}
        </div>
      `;
    } else if (current === "portsii") {
      // –ø–ª–∞—Ç–µ–Ω–∏ –¥–æ–±–∞–≤–∫–∏ ‚Äì –≤ –¥—è—Å–Ω–∞—Ç–∞ –∫–æ–ª–æ–Ω–∞, –±–µ–∑ –≤—Ç–æ—Ä–∏ "+" –±—É—Ç–æ–Ω
      wholeAddonsBlock = `
        <div class="addons">
          <div class="hdr">–î–æ–±–∞–≤–∫–∏</div>
          <label><input type="checkbox" class="addon-checkbox" data-code="pitka" data-price="1.5"> + –ü–∏—Ç–∫–∞</label>
          <label><input type="checkbox" class="addon-checkbox" data-code="raz"   data-price="1.5"> + –†–∞–∑—è–¥–∫–∞ 100 –≥—Ä</label>
        </div>
      `;
    } else if (current === "strandzhanki") {
      // —Å–æ—Å–æ–≤–µ ‚Äì –≤ –¥—è—Å–Ω–∞—Ç–∞ –∫–æ–ª–æ–Ω–∞, –±–µ–∑ –≤—Ç–æ—Ä–∏ "+" –±—É—Ç–æ–Ω
      wholeAddonsBlock = `
        <div class="addons">
          <div class="hdr">
            –°–æ—Å–æ–≤–µ
            <button type="button" class="btn-all" data-target="sauce">–í—Å–∏—á–∫–æ</button>
          </div>
          <label><input type="checkbox" class="addon-checkbox" data-group="sauce" data-code="ketchup" data-price="0"> –ö–µ—Ç—á—É–ø</label>
          <label><input type="checkbox" class="addon-checkbox" data-group="sauce" data-code="mayo"    data-price="0"> –ú–∞–π–æ–Ω–µ–∑–∞</label>
          <label><input type="checkbox" class="addon-checkbox" data-group="sauce" data-code="mustard" data-price="0"> –ì–æ—Ä—á–∏—Ü–∞</label>
          <label><input type="checkbox" class="addon-checkbox" data-group="sauce" data-code="chili"   data-price="0"> –õ—é—Ç–æ</label>
        </div>
      `;
    }
  }

  return `
    <article class="product ${i % 2 ? "even" : ""}">
      <div class="leftcol">
        <div class="photo" style="background-image:url('${it.img}')"></div>
      </div>

      <div class="pad">
        <h3 class="title">${esc(it.name)}</h3>
        ${desc}

        ${ current === "burgeri" ? addonsBlock : (wholeAddonsBlock || "") }

        ${pricePlusRow}
      </div>
    </article>`;
}


// üöó "–î–æ—Å—Ç–∞–≤–∏" ‚Üí Google Maps –Ω–∞–≤–∏–≥–∞—Ü–∏—è (origin = –º–æ–µ—Ç–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, dest = –∞–¥—Ä–µ—Å –æ—Ç –ø–æ—Ä—ä—á–∫–∞—Ç–∞)
function getPosition(opts = { enableHighAccuracy: true, timeout: 8000, maximumAge: 0 }) {
  return new Promise((resolve, reject) => {
    if (!('geolocation' in navigator)) return reject(new Error('no-geo'));
    navigator.geolocation.getCurrentPosition(resolve, reject, opts);
  });
}

document.addEventListener('click', async (e) => {
  const btn = e.target.closest('button.btn[data-action="maps"]');
  if (!btn) return;

  // 1) –î–µ—Å—Ç–∏–Ω–∞—Ü–∏—è (–∞–¥—Ä–µ—Å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞)
  let destination = (btn.dataset.address || localStorage.getItem('bbq_last_address') || '').trim();
  if (!destination) { alert('–ù—è–º–∞ –∞–¥—Ä–µ—Å –∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∞.'); return; }

  // 2) Origin: GPS ‚Üí My Location ‚Üí (–ø–æ –∏–∑–±–æ—Ä) —Ñ–∏–∫—Å–∏—Ä–∞–Ω –∞–¥—Ä–µ—Å
  let originParam = '';
  try {
    const pos = await getPosition();
    originParam = `&origin=${pos.coords.latitude},${pos.coords.longitude}`;
  } catch {
    // –∞–∫–æ –Ω—è–º–∞ HTTPS/—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    originParam = `&origin=My+Location`;
    // –∞–∫–æ –∏—Å–∫–∞—à –≤–∏–Ω–∞–≥–∏ –æ—Ç –æ–±–µ–∫—Ç–∞, —Ä–∞–∑–∫–æ–º–µ–Ω—Ç–∏—Ä–∞–π —Ä–µ–¥–∞ –æ—Ç–¥–æ–ª—É –∏ –º–∞—Ö–Ω–∏ –≥–æ—Ä–Ω–∏—è:
    // originParam = `&origin=${encodeURIComponent('Corner BBQ, –•–∞—Å–∫–æ–≤–æ')}`;
  }

  // 3) URL –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
  const url = 'https://www.google.com/maps/dir/?api=1'
            + originParam
            + '&destination=' + encodeURIComponent(destination)
            + '&travelmode=driving'
            + '&dir_action=navigate';

  // 4) –û—Ç–≤–∞—Ä—è–Ω–µ (–Ω–∞ –º–æ–±–∏–ª–Ω–æ ‚Äì –¥–∏—Ä–µ–∫—Ç–Ω–æ –≤ —Ç–µ–∫—É—â–∏—è —Ç–∞–±)
  if (/Mobi|Android|iPhone|iPad/i.test(navigator.userAgent)) {
    // iOS/Android ‚Äì –æ–ø–∏—Ç–∞–π app, –ø–æ—Å–ª–µ web
    // window.location.href = `comgooglemaps://?daddr=${encodeURIComponent(destination)}&directionsmode=driving`;
    // setTimeout(() => { window.location.href = url; }, 300); // fallback –∫—ä–º web
    window.location.href = url; // –ø—Ä–æ—Å—Ç –∏ —Å—Ç–∞–±–∏–ª–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç
  } else {
    window.open(url, '_blank', 'noopener');
  }
});

/* --- –£–≤–µ–ª–∏—á–∞–≤–∞–Ω–µ –ø—Ä–∏ –¥–≤–æ–µ–Ω –∫–ª–∏–∫ (desktop) --- */
document.addEventListener("dblclick", e => {
  const imgEl = e.target.closest(".photo");
  if (!imgEl) return;
  const alreadyZoomed = imgEl.classList.contains("zoomed");
  document.querySelectorAll(".photo.zoomed").forEach(el => el.classList.remove("zoomed"));
  if (alreadyZoomed) {
    document.body.style.overflow = "";
  } else {
    imgEl.classList.add("zoomed");
    document.body.style.overflow = "hidden";
  }
});

/* --- Double-tap –∑–∞ –º–æ–±–∏–ª–Ω–∏ --- */
document.addEventListener("touchend", (e) => {
  const imgEl = e.target.closest(".photo");
  if (!imgEl) return;
  const now = Date.now();
  const last = imgEl._lastTap || 0;
  if (now - last < 280) {
    const already = imgEl.classList.contains("zoomed");
    document.querySelectorAll(".photo.zoomed").forEach(el => el.classList.remove("zoomed"));
    if (!already) {
      imgEl.classList.add("zoomed");
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "";
    }
    imgEl._lastTap = 0;
  } else {
    imgEl._lastTap = now;
  }
}, { passive: true });

/* –ø–æ–º–æ—â–Ω–∏–∫ –∑–∞ –∏–∑—Ä–µ—á–µ–Ω–∏—è—Ç–∞ –ø—Ä–∏ –±–µ–ª–µ–∂–∫–∞—Ç–∞ */
function groupPhrase(card, group, kind){
  if (!card) return "";
  const all = [...card.querySelectorAll(`.addon-checkbox[data-group="${group}"]`)];
  if (!all.length) return "";

  const labelOf = (b) => (b.closest("label")?.textContent || "")
                          .trim()
                          .replace(/^\+\s*/, "");

  const allNames = all.map(labelOf);
  const sel      = all.filter(b => b.checked);
  const selNames = sel.map(labelOf);

  if (sel.length === all.length && sel.length > 0) {
    return kind === "veg" ? "—Å –≤—Å–∏—á–∫–æ" : "–≤—Å–∏—á–∫–∏ —Å–æ—Å–æ–≤–µ";
  }
  if (sel.length > 0) {
    const missing = allNames.filter(n => !selNames.includes(n));
    const base = kind === "veg" ? "–≤—Å–∏—á–∫–æ –±–µ–∑ ‚Äî " : "–≤—Å–∏—á–∫–∏ —Å–æ—Å–æ–≤–µ –±–µ–∑ ‚Äî ";
    return base + (missing.length ? missing.join(", ") : "(–Ω–∏—â–æ)");
  }
  return "";
}

/* –î–æ–±–∞–≤—è–Ω–µ ‚Äì —Å–ª—É—à–∞—Ç–µ–ª–∏ –∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏ */
function bindAddButtons(){
  if (!grid) return;
  grid.querySelectorAll(".add-btn").forEach(btn=>{
    btn.addEventListener("click", ()=>{
      const card = btn.closest(".product, .tile, .water-card");

      const baseName  = btn.getAttribute("data-name")?.trim();
      const basePrice = Number(btn.getAttribute("data-price"));
      const img       = btn.getAttribute("data-img") || "";

      if (!baseName || !(basePrice >= 0)) {
        // –Ω—è–º–∞ –≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏ ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä–∞–º–µ
        return;
      }

      const checks = card ? [...card.querySelectorAll(".addon-checkbox:checked")] : [];
      const addons = checks.map(ch => {
        const code  = ch.getAttribute("data-code");
        const def   = ADDONS[code] || {};
        const price = Number(ch.getAttribute("data-price")) || def.price || 0;
        const labelFromDOM = (ch.closest("label")?.textContent || "").trim();
        const labelClean = (labelFromDOM || def.label || "–î–æ–±–∞–≤–∫–∞").replace(/^\+\s*/, "");
        return { code, label: labelClean, price };
      });

      const addonsTotal = addons.reduce((s,a)=>s+a.price,0);
      const fullPrice   = basePrice + addonsTotal;

      const nameWithAddons = addons.length
        ? `${baseName} (+ ${addons.map(a=>a.label).join(", ")})`
        : baseName;

      addToCart({
        _id: Date.now()+""+Math.random(),
        name: nameWithAddons,
        baseName,
        price: fullPrice,
        basePrice,
        addons,
        img
      });

      const vegLine   = card ? groupPhrase(card, "veg",   "veg")   : "";
      const sauceLine = card ? groupPhrase(card, "sauce", "sauce") : "";
      const parts = [vegLine, sauceLine].filter(Boolean);
      if (parts.length && orderNoteEl) {
        const line = `${baseName}: ${parts.join("; ")}`;
        const cur  = (orderNoteEl.value || "").trim();
        orderNoteEl.value = cur ? (cur + "\n" + line) : line;
        localStorage.setItem(LS_ORDER_NOTE, orderNoteEl.value);
      }

      const was = btn.textContent;
      btn.textContent = "‚úì";
      setTimeout(()=> btn.textContent = was || "+", 450);

      checks.forEach(ch => ch.checked = false);
    });
  });
}


function onPromoMessage(e){
  const d = e?.data || {};
  if (d.type !== "bbq:addPromo") return;

  // –ü–æ–¥–¥—Ä—ä–∂–∫–∞ –Ω–∞ –ù–û–í —Ñ–æ—Ä–º–∞—Ç: {name, price, img, items}
  if (d.name || d.items) {
    const displayName = String(d.name || "–ü—Ä–æ–º–æ –ø–∞–∫–µ—Ç").trim();
    const price = Number(d.price || 0);
    const img   = d.img || d.image || "";

    // –ó–∞–ø–∏—Å–≤–∞–º–µ –≤–ª–æ–∂–µ–Ω–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏ –∫–∞—Ç–æ "addons" (—Å–∞–º–æ –∑–∞ –∏–Ω—Ñ–æ)
    const addons = Array.isArray(d.items)
      ? d.items.map(x => ({ code: x.name || "", label: x.name || "", price: 0 }))
      : [];

    addToCart({
      _id: Date.now() + "" + Math.random(),
      name: displayName,
      baseName: displayName,
      price, basePrice: price,
      img, addons
    });

    if (orderNoteEl){
      const line = `${displayName} (${fmtLv(price)} / ${fmtEur(price)})`;
      const cur  = (orderNoteEl.value || "").trim();
      orderNoteEl.value = cur ? (cur + "\n" + line) : line;
      localStorage.setItem(LS_ORDER_NOTE, orderNoteEl.value);
    }
    return;
  }

  // –ü–æ–¥–¥—Ä—ä–∂–∫–∞ –Ω–∞ –°–¢–ê–† —Ñ–æ—Ä–º–∞—Ç: {a:{name,img}, b:{name,img}, price, hero}
  const aName = d.a?.name?.trim() || "A";
  const bName = d.b?.name?.trim() || "B";
  const displayName = (d.name && String(d.name).trim()) || `–ü–†–û–ú–û: ${aName} + ${bName}`;
  const price = Number(d.price || 0);
  const img   = d.hero || d.a?.img || d.b?.img || "";
  const itemsLine = `${aName} + ${bName}`;

  addToCart({
    _id: Date.now() + "" + Math.random(),
    name: displayName,
    baseName: displayName,
    price, basePrice: price,
    img,
    addons: [{ code: "promo", label: itemsLine, price: 0 }]
  });

  if (orderNoteEl){
    const line = `${displayName} (${fmtLv(price)} / ${fmtEur(price)})`;
    const cur  = (orderNoteEl.value || "").trim();
    orderNoteEl.value = cur ? (cur + "\n" + line) : line;
    localStorage.setItem(LS_ORDER_NOTE, orderNoteEl.value);
  }
}



/* === –ü—Ä–∏–µ–º–∞–Ω–µ –Ω–∞ –ü–†–û–ú–û –µ–ª–µ–º–µ–Ω—Ç–∏ –æ—Ç index7 —á—Ä–µ–∑ postMessage (–∞–∫–æ –ø–æ–ª–∑–≤–∞—à iframe) === */
window.addEventListener("message", onPromoMessage, false);


const KEY_ALIAS = { sandvichi: "burgeri" };


/* ===== –ê–∫—Ç–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è + —Ä–µ–Ω–¥–µ—Ä ===== */
let current = null;

function activate(cat, {fromNav=false, replace=false} = {}){
    const realCat = KEY_ALIAS[cat] || cat;
  /* üß° –ü–†–û–ú–û–¶–ò–ò ‚Äî –∞–∫–æ –ø–æ–ª–∑–≤–∞—à iframe –ø—Ä–æ–º–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ */
if (cat === "promocii") {
  current = "promocii";
  showPromosIframe(true);

  if (sidebar){
    sidebar.querySelectorAll(".cat")
      .forEach(c => c.classList.toggle("active", c.dataset.cat === "promocii"));
  }

  const url = new URL(location.href);
  if (url.searchParams.get("cat") !== "promocii") {
    url.searchParams.set("cat", "promocii");
    if (replace) history.replaceState({ cat: "promocii" }, "", url);
    else if (fromNav) history.pushState({ cat: "promocii" }, "", url);
  }

  if (titleEl) titleEl.textContent = "–ü–†–û–ú–û–¶–ò–ò";

  if (grid) grid.innerHTML = "";



if (new URLSearchParams(location.search).get("mode") === "moderator") {
  setTimeout(() => {
    window.enableInlineEditing?.();
    window.enableProductDnd?.();
    window.injectDeleteButtons?.();
    window.fixEditLayers?.();
    window.ensurePlusRightUniversal?.();
    window.ensureMobilePlusRight?.();
  }, 0);
}

  recalcMobileOffsets();
  ensurePlusRightUniversal();
  return;
}


  // === –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

  showPromosIframe(false);
  const exists = !!CATALOG[realCat];
  if (!exists) cat = realCat = "burgeri";

  current = realCat;

  if (sidebar){
    sidebar.querySelectorAll(".cat")
      .forEach(c => c.classList.toggle("active", c.dataset.cat === realCat));
  }
  if (titleEl) titleEl.textContent = CATALOG[realCat]?.title || realCat.toUpperCase();

  const url2 = new URL(location.href);
  if (url2.searchParams.get("cat") !== cat) {
    url2.searchParams.set("cat", cat); // –ø–∞–∑–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è, –∑–∞ –¥–∞ –º–æ–∂–µ –¥–∞ —Å—Ç–æ–∏ ?cat=sandvichi
    if (replace) history.replaceState({cat}, "", url2);
    else if (fromNav) history.pushState({cat}, "", url2);
  }

  const data = CATALOG[cat];
  if (!grid) return;

  // üß© Fallback: –∞–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω—è–º–∞ items, –≤–∑–µ–º–∏ burgeri (–∑–∞ –¥–∞ —Ä–∞–±–æ—Ç–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ä—Ç)
  if (!data || !Array.isArray(data.items)) {
    const alias = { strandjanki: "burgeri", sandvichi: "burgeri" };
    const fallback = alias[cat];
    if (fallback && CATALOG[fallback]) {
      current = fallback;
      activate(fallback, { fromNav, replace });
      return;
    }
  }

  if (data.view === "water2") {
    grid.innerHTML = `
      <div class="water-wrapper">
        ${data.groups.map(g=>`
          <section class="water-block">
            <h2>${g.heading}</h2>
            <div class="water-grid">
              ${g.pair.map(p=>`
                <div class="water-card">
                  <img src="${p.src}" alt="${esc(p.label)}">
                  <div class="water-name">${esc(p.label)}</div>
                  ${typeof p.price === "number" ? `
                    <div class="price-badge">
                      <div class="lv">${fmtLv(p.price)}</div>
                      <div class="eur">${fmtEur(p.price)}</div>
                    </div>
                    <button class="add-btn" data-name="${p.label.replace(/"/g,"&quot;")}" data-price="${p.price}" data-img="${p.src}">+</button>
                  ` : ``}
                </div>
              `).join("")}
            </div>
          </section>
        `).join("")}
      </div>
    `;
    bindAddButtons();
    recalcMobileOffsets();
    ensurePlusRightUniversal();
    return;
  }

  if (data.view === "gallery") {
    const hellPrice = data.hellPrice ?? 2.00;
    grid.innerHTML = data.groups.map(group=>{
      const pics = group.images.map(src=>{
        const label = esc(prettyLabel(src));
        return `
        <div>
          <div class="tile">
            <img src="${src}" alt="${label}">
            <div class="price-badge">
              <div class="lv">${fmtLv(hellPrice)}</div>
              <div class="eur">${fmtEur(hellPrice)}</div>
            </div>
            <button class="add-btn" data-name="${label.replace(/"/g,"&quot;")}" data-price="${hellPrice}" data-img="${src}">+</button>
          </div>
          <div class="caption">${label}</div>
        </div>`;
      }).join("");
      return `
        <h2 class="sec-title">${esc(group.heading)}</h2>
        <div class="gallery">${pics}</div>
      `;
    }).join("");
    bindAddButtons();
    recalcMobileOffsets();
    ensureMobilePlusRight();
    return;
  }

  if (data.groups && Array.isArray(data.groups)) {
    const groupsHTML = data.groups.map(group => `
      <h2 class="sec-title">${esc(group.heading)}</h2>
      <div class="grid-products">
       ${group.items?.map((it,i)=> productCardHTML(it,i, catHasAddons(current))).join("")}
      </div>
    `).join("");
    grid.innerHTML = groupsHTML;
    bindAddButtons();
    recalcMobileOffsets();
    ensureMobilePlusRight();
    return;
  }

  const items = (data?.items)||[];
  if (items.length === 0) {
    grid.innerHTML = `<p style="padding:16px;font-weight:700">–ù—è–º–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ –≤ —Ç–∞–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è.</p>`;
    recalcMobileOffsets();
    return;
  }
  grid.innerHTML = `
    <div class="grid-products">
      ${items.map((it,i)=> productCardHTML(it,i, catHasAddons(current))).join("")}
    </div>
  `;
  bindAddButtons();
  recalcMobileOffsets();
  ensureMobilePlusRight();
}

/* ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===== */
function shouldBypassDelay(evt){ return evt.metaKey || evt.ctrlKey || evt.shiftKey || evt.altKey || evt.button === 1; }
const POP_DELAY = 100;
function popThenActivate(el, key){
  if (!el) return activate(key, {fromNav:true});
  el.classList.remove("is-pressed"); el.classList.add("is-popping"); el.dataset.locked = "1";
  setTimeout(()=>{ activate(key, {fromNav:true}); el.classList.remove("is-popping"); delete el.dataset.locked; }, POP_DELAY);
}
function initFromURL(){
  const params = new URLSearchParams(location.search);
  const cat = params.get("cat") || "burgeri";
  activate(cat, {replace:true});
}

restoreCartFromLS();
restoreOrderNote?.();
initFromURL();

if (sidebar){
  sidebar.querySelectorAll(".cat").forEach(catEl=>{
    const key = catEl.dataset.cat;
    catEl.addEventListener("click", (e)=>{
      if (shouldBypassDelay(e)) return;
      e.preventDefault();
      if (catEl.dataset.locked==="1" || key===current) return;
      popThenActivate(catEl, key);
    });
  });
}
























/* ===========================
   üü† MODERATOR MODE (ULTRA PRO)
   =========================== */
document.addEventListener("DOMContentLoaded", () => {

    
      /* =====================================================
     üü† Persistent MODERATOR MODE (–∑–∞–ø–∞–∑–≤–∞ —Å–µ —Å–ª–µ–¥ —Ä–µ—Ñ—Ä–µ—à)
     ===================================================== */
  const LS_MODE_FLAG = "bbq_mode_flag";
  const urlParams = new URLSearchParams(window.location.search);
  let isModerator = false;

  // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –≤–µ—á–µ –∏–º–∞ –∑–∞–ø–∏—Å–∞–Ω —Ä–µ–∂–∏–º
  if (localStorage.getItem(LS_MODE_FLAG) === "true") {
    isModerator = true;

    // –ê–∫–æ URL –Ω—è–º–∞ –ø–∞—Ä–∞–º–µ—Ç—ä—Ä ‚Äî –¥–æ–±–∞–≤—è–º–µ –≥–æ (–∑–∞ —Å—Ç–∞–±–∏–ª–Ω–æ—Å—Ç)
    if (!urlParams.get("mode")) {
      urlParams.set("mode", "moderator");
      const newUrl = `${location.pathname}?${urlParams.toString()}`;
      history.replaceState({}, "", newUrl);
    }
  }

  // 2Ô∏è‚É£ –ê–∫–æ –∏–º–∞ –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –≤ URL ‚Äî –≤–ª–∏–∑–∞–º–µ –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∂–∏–º
  if (urlParams.get("mode") === "moderator") {
    isModerator = true;
    localStorage.setItem(LS_MODE_FLAG, "true");
  }

  // 3Ô∏è‚É£ –ê–∫–æ –Ω–µ —Å–º–µ –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∂–∏–º ‚Äî –∏–∑—Ç—Ä–∏–≤–∞–º–µ –∑–∞–ø–∏—Å–∞
  if (!isModerator) {
    localStorage.removeItem(LS_MODE_FLAG);
  }


// >>> LOAD ONLY IN MOD MODE ‚Äî START
if (isModerator) {
  // –ß–µ—Ä–Ω–æ–≤–∏ (CATALOG/ORDER) ‚Äî –∞–∫–æ –≥–∏ –∏–º–∞
  const savedCatalog = localStorage.getItem("CATALOG");
  const savedOrder   = localStorage.getItem("ORDER");
  if (savedCatalog) Object.assign(CATALOG, JSON.parse(savedCatalog));
  if (savedOrder) { ORDER.length = 0; ORDER.push(...JSON.parse(savedOrder)); }

  // –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–µ–Ω —Å–Ω–∞–ø—à–æ—Ç (BBQ_MAIN_CATALOG)
  const savedMainData = localStorage.getItem("BBQ_MAIN_CATALOG");
  if (savedMainData) {
    try {
      const data = JSON.parse(savedMainData);
      if (data.CATALOG)     Object.assign(CATALOG, data.CATALOG);
      if (Array.isArray(data.ORDER)) { ORDER.length = 0; ORDER.push(...data.ORDER); }
      if (data.cat_thumbs)  Object.assign(CAT_THUMBS, data.cat_thumbs);
      if (data.ADDON_LABELS) ADDON_LABELS = data.ADDON_LABELS;
      if (data.ADDONS)      Object.assign(ADDONS, data.ADDONS);
    } catch(e){ console.warn("MAIN load error:", e); }
  }
}
// >>> LOAD ONLY IN MOD MODE ‚Äî END


  // 4Ô∏è‚É£ –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—Ö–æ–¥
  const exitModeratorMode = () => {
    localStorage.removeItem(LS_MODE_FLAG);
    urlParams.delete("mode");
    const newUrl = `${location.pathname}`;
    history.replaceState({}, "", newUrl);
    location.reload();
  };

// –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ CATALOG/ORDER –æ—Ç localStorage –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ
// ‚ùó –°–ï–ì–ê: —Å–∞–º–æ –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∂–∏–º
if (isModerator) {
  const savedCatalog = localStorage.getItem("CATALOG");
  const savedOrder   = localStorage.getItem("ORDER");
  if (savedCatalog) Object.assign(CATALOG, JSON.parse(savedCatalog));
  if (savedOrder) {
    ORDER.length = 0;
    ORDER.push(...JSON.parse(savedOrder));
  }
}


  // –ê–∫–æ –Ω–µ —Å–º–µ –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∂–∏–º ‚Äî –ø—Ä–µ–∫—Ä–∞—Ç—è–≤–∞–º–µ
  if (!isModerator) return;


  /* ===== Settings ===== */
  const MOD_PASSWORD     = "0000"; // <‚Äî –°–ú–ï–ù–ò –ú–ï
  const LS_MOD_DATA      = "bbq_mod_data_v3";     // Save (–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ)
  const LS_MOD_DRAFT     = "bbq_mod_draft_v3";    // Autosave —á–µ—Ä–Ω–æ–≤–∞
  const LS_MOD_TRASH     = "bbq_mod_trash_v2";    // –ö–æ—à—á–µ
  const DEFAULT_CAT_THUMB= "snimki/produkti/1menu/default.jpg";

  /* ===== Utils ===== */
  const save = (k,v)=>localStorage.setItem(k,JSON.stringify(v));
  const read = (k,d=null)=>{try{return JSON.parse(localStorage.getItem(k)||"null")??d;}catch{return d;}};
  const esc  = s=>String(s).replace(/[&<>"]/g,m=>({"&":"&amp;","<":"&lt;",">":"&gt;"}[m]));
  const lvParse  = t => { const n=String(t||"").replace(/\s*–ª–≤\.?\s*$/i,"").replace(",","."); const v=parseFloat(n); return isFinite(v)?v:0; };
  const lvFormat = n => (Number(n)||0).toFixed(2).replace(".",",")+" –ª–≤.";
  const askPass  = (msg="–ü–∞—Ä–æ–ª–∞") => prompt(msg,"") === MOD_PASSWORD;
  const toast = (m="–ì–æ—Ç–æ–≤–æ")=>{
    const d=document.createElement("div");
    d.textContent=m; Object.assign(d.style,{
      position:"fixed",left:"50%",transform:"translateX(-50%)",bottom:"22px",
      background:"#111",color:"#fff",padding:"10px 14px",borderRadius:"12px",
      zIndex:"99999",fontWeight:"800",boxShadow:"0 8px 28px rgba(0,0,0,.35)",opacity:"0",transition:"opacity .15s"
    }); document.body.appendChild(d); requestAnimationFrame(()=>d.style.opacity="1");
    setTimeout(()=>{d.style.opacity="0"; setTimeout(()=>d.remove(),180)},1300);
  };

  /* ===== Addons editor memory (–ø–µ—Ä-–∫–∞—Ç–µ–≥–æ—Ä–∏—è) =====
     { addons_labels: { burgeri: { veg:[..], sauce:[..] }, strandzhanki:{...}, portsii:{ paid:[ {code,label,price}, ... ] } } }
  */
  const getMemory = ()=>read(LS_MOD_DRAFT,{});
  const setMemory = (obj)=>save(LS_MOD_DRAFT,obj);

  /* ===== Snapshot runtime ‚Üí object ===== */

const snapshotRuntime = ()=>{
  const snap = { order:[...ORDER], catalog:{}, cat_thumbs:{}, addons_labels: read(LS_MOD_DRAFT,{}).addons_labels || {} };
  ORDER.forEach(k=>{
    const c = CATALOG[k] || {};
    const normItem = it => ({
      name: it.name||"–ü—Ä–æ–¥—É–∫—Ç",
      desc: it.desc||"",
      price: Number(it.price)||0,
      img: it.img||""
    });

    snap.catalog[k] = {
      title: c.title || k.toUpperCase(),
      view: c.view || undefined,
      hellPrice: c.hellPrice || undefined,
      items: Array.isArray(c.items) ? c.items.map(normItem) : undefined,
      groups: Array.isArray(c.groups) ? c.groups.map(g => ({
        heading: g.heading || "",
        items: Array.isArray(g.items) ? g.items.map(normItem) : undefined,
        images: Array.isArray(g.images) ? [...g.images] : undefined,
        pair: Array.isArray(g.pair) ? g.pair.map(p => ({...p})) : undefined
      })) : undefined
    };
    snap.cat_thumbs[k] = CAT_THUMBS[k] || DEFAULT_CAT_THUMB;
  });
  return snap;
};


const applySaved = (data)=>{
  if(!data||typeof data!=="object") return;

  if(Array.isArray(data.order)&&data.order.length){
    const known=new Set(ORDER);
    data.order.forEach(k=>{ if(!known.has(k)) ORDER.push(k); });
    const rest=ORDER.filter(k=>!data.order.includes(k));
    ORDER.length=0; data.order.forEach(k=>ORDER.push(k)); rest.forEach(k=>ORDER.push(k));
  }

  if(data.catalog&&typeof data.catalog==="object"){
    Object.entries(data.catalog).forEach(([key,val])=>{
      if(!CATALOG[key]){ CATALOG[key]={ title:val.title||key.toUpperCase(), items:[] }; }
      CATALOG[key].title     = val.title || CATALOG[key].title;
      CATALOG[key].view      = val.view ?? CATALOG[key].view;
      CATALOG[key].hellPrice = val.hellPrice ?? CATALOG[key].hellPrice;
      if (Array.isArray(val.items))  CATALOG[key].items  = val.items;
      if (Array.isArray(val.groups)) CATALOG[key].groups = val.groups;
    });
  }

  if(data.cat_thumbs) Object.assign(CAT_THUMBS, data.cat_thumbs||{});
  if(data.addons_labels) {
    const mem=getMemory(); mem.addons_labels = data.addons_labels; setMemory(mem);
  }
};


  const persistDraft = ()=> save(LS_MOD_DRAFT, { ...snapshotRuntime(), addons_labels: read(LS_MOD_DRAFT,{}).addons_labels || {} });
  const savePermanent = ()=> save(LS_MOD_DATA, snapshotRuntime());

  /* ===== Trash ===== */
  const trashPush = entry => { const a=read(LS_MOD_TRASH,[]); a.unshift({ ...entry, ts:Date.now() }); save(LS_MOD_TRASH,a); };
  const trashList = ()=> read(LS_MOD_TRASH,[]);
  const trashDel  = i => { const a=trashList(); a.splice(i,1); save(LS_MOD_TRASH,a); };
  const trashPurge= ()=> save(LS_MOD_TRASH,[]);

  const openTrashUI = ()=>{
    const items=trashList();
    const wrap=document.createElement("div");
    Object.assign(wrap.style,{position:"fixed",inset:"0",zIndex:"100000",background:"rgba(0,0,0,.55)",display:"flex",alignItems:"center",justifyContent:"center",padding:"22px"});
    const box=document.createElement("div");
    Object.assign(box.style,{background:"#fff",borderRadius:"14px",width:"min(900px,96vw)",maxHeight:"86vh",overflow:"auto",boxShadow:"0 18px 60px rgba(0,0,0,.35)",padding:"14px"});
    box.innerHTML=`
      <div style="display:flex;align-items:center;justify-content:space-between">
        <h3 style="margin:0">üóë –ö–æ—à—á–µ</h3>
        <div>
          <button data-a="purge" style="margin-right:8px">–ò–∑—á–∏—Å—Ç–∏</button>
          <button data-a="close">–ó–∞—Ç–≤–æ—Ä–∏</button>
        </div>
      </div>
      <div class="tlist">${!items.length?'<div style="opacity:.7;padding:8px 0">–ü—Ä–∞–∑–Ω–æ</div>':''}</div>`;
    const list=box.querySelector(".tlist");
    items.forEach((it,idx)=>{
      const when=new Date(it.ts||Date.now()).toLocaleString();
      const row=document.createElement("div");
      Object.assign(row.style,{border:"1px solid #eee",borderRadius:"10px",padding:"10px 12px",margin:"8px 0",display:"grid",gridTemplateColumns:"1fr auto",gap:"8px"});
      row.innerHTML=`
        <div>
          <div><b>${esc(it.kind.toUpperCase())}</b> ‚Ä¢ ${esc(it.title||it.catKey||"")}</div>
          <div style="opacity:.7;font-size:12px">${when}</div>
        </div>
        <div style="display:flex;gap:6px">
          <button data-i="${idx}" data-a="restore">–í—ä–∑—Å—Ç–∞–Ω–æ–≤–∏</button>
          <button data-i="${idx}" data-a="del">–ü—Ä–µ–º–∞—Ö–Ω–∏</button>
        </div>`;
      list.appendChild(row);
    });
    wrap.appendChild(box); document.body.appendChild(wrap);
    const close=()=>wrap.remove();
    box.addEventListener("click",(e)=>{
      const b=e.target.closest("button"); if(!b) return;
      const a=b.dataset.a;
      if(a==="close") return close();
      if(a==="purge"){ if(askPass("–ü–∞—Ä–æ–ª–∞ –∑–∞ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ")){ trashPurge(); close(); toast("–ö–æ—à—á–µ—Ç–æ –µ –∏–∑—á–∏—Å—Ç–µ–Ω–æ"); } return; }
      const i=Number(b.dataset.i); const arr=trashList(); const entry=arr[i]; if(!entry) return;

      if(a==="restore"){
        if(entry.kind==="product"){
          const {catKey,index,item}=entry;
          if(!CATALOG[catKey]) CATALOG[catKey]={title:catKey.toUpperCase(),items:[]};
          const L=CATALOG[catKey].items; const pos=Math.max(0,Math.min(index??L.length,L.length));
          L.splice(pos,0,item); persistDraft(); trashDel(i); activate(catKey,{replace:true}); toast("–í—ä–∑—Å—Ç–∞–Ω–æ–≤–µ–Ω –ø—Ä–æ–¥—É–∫—Ç");
        } else if(entry.kind==="category"){
          const {catKey,title,items,thumb,index}=entry;
          if(!ORDER.includes(catKey)){ const pos=Math.max(0,Math.min(index??ORDER.length,ORDER.length)); ORDER.splice(pos,0,catKey); }
          CATALOG[catKey]={title:title||catKey.toUpperCase(),items:items||[]}; if(thumb) CAT_THUMBS[catKey]=thumb;
          persistDraft(); trashDel(i); rebuildSidebar(); popThenActivate(null,catKey); toast("–í—ä–∑—Å—Ç–∞–Ω–æ–≤–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è");
        }
      }
      if(a==="del"){ trashDel(i); b.closest("div[style]").remove(); }
    });
    wrap.addEventListener("click",(e)=>{ if(e.target===wrap) close(); });
  };

  /* ===== Addons labels: read/store and apply after render ===== */
  const getAddonsFor = (catKey)=>{
    const mem=read(LS_MOD_DRAFT,{});
    return (mem.addons_labels&&mem.addons_labels[catKey]) || null;
  };
  const putAddonsFor = (catKey, data)=>{
    const mem=read(LS_MOD_DRAFT,{});
    mem.addons_labels = mem.addons_labels || {};
    mem.addons_labels[catKey] = data;
    setMemory(mem);
    persistDraft();
  };

  // –ü—Ä–∏ —Ä–µ–Ω–¥–µ—Ä ‚Äì –∞–∫–æ –∏–º–∞ –¥–µ—Ñ–∏–Ω–∏—Ü–∏–∏ –æ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, —Å–º–µ–Ω—è–º–µ –µ—Ç–∏–∫–µ—Ç–∏—Ç–µ –∏/–∏–ª–∏ —Ü–µ–Ω–∏—Ç–µ
  const applyAddonsLabelsToDOM = (catKey)=>{
    const def = getAddonsFor(catKey);
    if(!def) return;

    // –≥—Ä—É–ø–∏ –±–µ–∑ —Ü–µ–Ω–∏
    ["veg","sauce"].forEach(g=>{
      const arr = def[g];
      if(!Array.isArray(arr)) return;
      const boxes = [...document.querySelectorAll(`.addon-checkbox[data-group="${g}"]`)];
      boxes.forEach((b,i)=>{
        const label = b.closest("label");
        if(label && arr[i]) {
          label.childNodes[label.childNodes.length-1].nodeValue = " " + arr[i];
        }
      });
    });

    // –ø–ª–∞—Ç–µ–Ω–∏ –¥–æ–±–∞–≤–∫–∏ (portsii)
    if(Array.isArray(def.paid)){
      const paid = def.paid;
      const boxes = [...document.querySelectorAll(`.product .addon-checkbox:not([data-group])`)];
      boxes.forEach((b,i)=>{
        const labelEl=b.closest("label");
        if(!labelEl || !paid[i]) return;
        const {label,price} = paid[i];
        b.setAttribute("data-price", Number(price)||0);
        labelEl.childNodes[labelEl.childNodes.length-1].nodeValue = ` + ${label}`;
      });
    }
  };

  /* ===== Helpers ===== */
  const currentCat = ()=> new URLSearchParams(location.search).get("cat") || current || "burgeri";

  /* ===== Sidebar build + DnD + edit buttons ===== */
  const rebuildSidebar = ()=>{
    if(!sidebar) return;

    sidebar.innerHTML = ORDER.map(key=>{
      const label=(key==="promocii") ? "–ü–†–û–ú–û–¶–ò–ò" : (CATALOG[key]?.title || key.toUpperCase());
      const img  = CAT_THUMBS[key] || DEFAULT_CAT_THUMB;
      return `
        <a class="cat" draggable="true" data-cat="${esc(key)}" role="link" tabindex="0" aria-label="${esc(label)}">
          <div class="box cat-box" style="background-image:url('${img}')" data-label="${esc(label)}">
            <span class="cat-hover-tools" aria-hidden="true">
              <button class="cat-pic" title="–°–º–µ–Ω–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞">üìÅ</button>
              <button class="cat-rename" title="–ü—Ä–µ–∏–º–µ–Ω—É–≤–∞–π">üñä</button>
              <button class="cat-delete" title="–ò–∑—Ç—Ä–∏–π">üóë</button>
            </span>
          </div>
          <div class="cat-label">${esc(label)}</div>
        </a>`;
    }).join("") + `
      <a class="cat cat--add" role="button" tabindex="0" aria-label="–î–æ–±–∞–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è">
        <div class="box" style="display:flex;align-items:center;justify-content:center"><span style="font-size:42px">+</span></div>
        <div class="cat-label">–î–æ–±–∞–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è</div>
      </a>`;

    // –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    sidebar.querySelectorAll(".cat").forEach(el=>{
      const key=el.dataset.cat;
      el.addEventListener("click",(e)=>{
        if(el.classList.contains("cat--add")) return;
        if(e.target.closest(".cat-hover-tools")) return;
        if(shouldBypassDelay(e)) return;
        e.preventDefault(); if(!key||key===current) return;
        popThenActivate(el,key);
      });
    });

    // –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
    sidebar.querySelectorAll(".cat-box").forEach(b=>b.style.position="relative");
    sidebar.querySelectorAll(".cat-hover-tools").forEach(t=>{
      Object.assign(t.style,{position:"absolute",top:"6px",right:"6px",display:"none",gap:"6px"});
      t.parentElement.addEventListener("mouseenter",()=>t.style.display="inline-flex");
      t.parentElement.addEventListener("mouseleave",()=>t.style.display="none");
      t.querySelectorAll("button").forEach(b=>Object.assign(b.style,{border:"none",borderRadius:"8px",padding:"4px 6px",background:"rgba(0,0,0,.55)",color:"#fff",cursor:"pointer"}));
    });

    // —Å–º—è–Ω–∞ –Ω–∞ –∏–∫–æ–Ω–∞ (üìÅ)
    sidebar.querySelectorAll(".cat-pic").forEach(btn=>{
      btn.addEventListener("click",(e)=>{
        e.stopPropagation();
        const catKey=e.target.closest(".cat")?.dataset?.cat; if(!catKey) return;
        const input=document.createElement("input"); input.type="file"; input.accept="image/*";
        input.onchange=ev=>{
          const f=ev.target.files?.[0]; if(!f) return;
          const r=new FileReader(); r.onload=ev2=>{ CAT_THUMBS[catKey]=ev2.target.result; persistDraft(); rebuildSidebar(); };
          r.readAsDataURL(f);
        };
        input.click();
      });
    });

    // –ø—Ä–µ–∏–º–µ–Ω—É–≤–∞–Ω–µ (üñä)
    sidebar.querySelectorAll(".cat-rename").forEach(btn=>{
      btn.addEventListener("click",(e)=>{
        e.stopPropagation();
        const catKey=e.target.closest(".cat")?.dataset?.cat;
        const old=CATALOG[catKey]?.title||catKey.toUpperCase();
        const t=prompt("–ù–æ–≤–æ –∏–º–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:",old); if(!t) return;
        if(!CATALOG[catKey]) CATALOG[catKey]={title:t,items:[]}; else CATALOG[catKey].title=t;
        persistDraft(); rebuildSidebar();
        if(currentCat()===catKey && titleEl) titleEl.textContent=t;
      });
    });

    // –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ (üóë) ‚Äì —Ä–∞–±–æ—Ç–∏ –∏ –∑–∞ —Ç–æ–∫—É-—â–æ —Å—ä–∑–¥–∞–¥–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    sidebar.querySelectorAll(".cat-delete").forEach(btn=>{
      btn.addEventListener("click",(e)=>{
        e.stopPropagation();
        const catKey=e.target.closest(".cat")?.dataset?.cat;
        if(catKey==="promocii"){ alert("–ü–†–û–ú–û–¶–ò–ò –Ω–µ –º–æ–∂–µ –¥–∞ —Å–µ –∏–∑—Ç—Ä–∏–≤–∞."); return; }
        if(ORDER.length<=1){ alert("–¢—Ä—è–±–≤–∞ –¥–∞ –∏–º–∞ –ø–æ–Ω–µ –µ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è."); return; }
        if(!askPass("–ü–∞—Ä–æ–ª–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è")) return;
        const idx=ORDER.indexOf(catKey);
        trashPush({ kind:"category", catKey, title:CATALOG[catKey]?.title||catKey, items:(CATALOG[catKey]?.items||[]).map(x=>({...x})), thumb:CAT_THUMBS[catKey]||"", index:idx });
        if(idx>=0) ORDER.splice(idx,1);
        try{ delete CATALOG[catKey]; }catch{}
        persistDraft(); rebuildSidebar();
        const next=ORDER[0] || "burgeri"; popThenActivate(null,next);
        toast("–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –µ –≤ –ö–æ—à—á–µ—Ç–æ");
      });
    });

    // ‚Äû+‚Äú –ø–ª–æ—á–∫–∞
    sidebar.querySelector(".cat--add")?.addEventListener("click",(e)=>{
      e.preventDefault();
      let key=prompt("–°–ª—ä–≥ (–ª–∞—Ç–∏–Ω–∏—Ü–∞), –Ω–∞–ø—Ä. 'pizza':",""); if(!key) return;
      key=key.trim().toLowerCase().replace(/\s+/g,"_").replace(/[^a-z0-9_]/g,""); if(!key){ alert("–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∫–ª—é—á."); return; }
      if(ORDER.includes(key)){ alert("–í–µ—á–µ –∏–º–∞ —Ç–∞–∫–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è."); return; }
      const title=prompt("–ó–∞–≥–ª–∞–≤–∏–µ:", "–ù–û–í–ê –ö–ê–¢–ï–ì–û–†–ò–Ø")||"–ù–û–í–ê –ö–ê–¢–ï–ì–û–†–ò–Ø";
      ORDER.push(key); CATALOG[key]={title,items:[]}; CAT_THUMBS[key]=CAT_THUMBS[key]||DEFAULT_CAT_THUMB;
      persistDraft(); rebuildSidebar(); popThenActivate(null,key);
    });

    // Drag&Drop –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ
    let drag=null;
    sidebar.querySelectorAll(".cat:not(.cat--add)").forEach(el=>{
      el.addEventListener("dragstart", ()=>{ drag=el; el.style.opacity=".5"; });
      el.addEventListener("dragend",   ()=>{ el.style.opacity="1"; drag=null; });
      el.addEventListener("dragover",  e=>e.preventDefault());
      el.addEventListener("drop",      e=>{
        e.preventDefault(); if(!drag||drag===el) return;
        el.parentNode.insertBefore(drag, el.nextSibling);
        const keys=[...sidebar.querySelectorAll(".cat:not(.cat--add)")].map(x=>x.dataset.cat);
        ORDER.length=0; keys.forEach(k=>ORDER.push(k)); persistDraft(); toast("–ü–æ–¥—Ä–µ–¥–µ–Ω–æ");
      });
    });
  };

  /* ===== inline —Ä–µ–¥–∞–∫—Ü–∏—è (–∑–∞–≥–ª–∞–≤–∏—è/–æ–ø–∏—Å–∞–Ω–∏—è/—Ü–µ–Ω–∏/—Å–Ω–∏–º–∫–∏) ===== */
  const enableInlineEditing = ()=>{
    document.querySelectorAll(".product .title, .product .desc, .price-badge .lv").forEach(el=>{
      el.contentEditable="true"; el.setAttribute("data-mod","1");
      el.style.outline="1px dashed #ff7a00"; el.style.cursor="text";
      el.addEventListener("input",()=>{
        const key=currentCat(); const cards=[...grid.querySelectorAll(".product")];
        const i=cards.findIndex(x=>x.contains(el)); if(i<0) return;
        const item=(CATALOG[key]?.items||[])[i]; if(!item) return;
        if(el.classList.contains("title")) item.name = el.textContent.trim();
        else if(el.classList.contains("desc")) item.desc = el.textContent.trim();
        else if(el.classList.contains("lv"))  item.price= lvParse(el.textContent);
        persistDraft();
      });
    });

    // —Å–º—è–Ω–∞ –Ω–∞ —Å–Ω–∏–º–∫–∏ (–∫–∞—Ä—Ç–∞/–≥–∞–ª–µ—Ä–∏—è/–≤–æ–¥–∞)
    document.querySelectorAll(".product .photo, .tile img, .water-card img").forEach(img=>{
      img.style.cursor="pointer";
      img.addEventListener("click",()=>{
        const input=document.createElement("input"); input.type="file"; input.accept="image/*";
        input.onchange=e=>{
          const f=e.target.files?.[0]; if(!f) return;
          const r=new FileReader(); r.onload=ev=>{
            const url=ev.target.result; if(img.tagName==="IMG") img.src=url; else img.style.backgroundImage=`url('${url}')`;
            const key=currentCat(); const cards=[...grid.querySelectorAll(".product")];
            const i=cards.findIndex(x=>x.contains(img)); if(i>=0 && CATALOG[key]?.items?.[i]){ CATALOG[key].items[i].img=url; persistDraft(); }
          }; r.readAsDataURL(f);
        };
        input.click();
      });
    });

    // –†–ï–î–ê–ö–¢–û–† –∑–∞ –°–æ—Å–æ–≤–µ/–î–æ–±–∞–≤–∫–∏:
    // 1) –ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç–æ–≤–µ—Ç–µ –≤ —á–µ–∫–±–æ–∫—Å–æ–≤–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∏ (label)
    document.querySelectorAll(".addons label").forEach(lbl=>{
      const txtNode = [...lbl.childNodes].find(n=>n.nodeType===3); // —Ç–µ–∫—Å—Ç —Å–ª–µ–¥ —á–µ–∫–±–æ–∫—Å–∞
      if(!txtNode) return;
      lbl.setAttribute("contenteditable","true");
      lbl.addEventListener("blur",()=>{
        const key=currentCat();
        const group=lbl.querySelector(".addon-checkbox")?.dataset.group || null;
        const code =lbl.querySelector(".addon-checkbox")?.dataset.code  || null;
        const raw = (lbl.textContent||"").trim().replace(/^\+\s*/,"");
        const mem = getMemory() || {};
        // –≥—Ä—É–ø–∏ –±–µ–∑ —Ü–µ–Ω–∞ (veg/sauce)
        if(group==="veg"||group==="sauce"){
          const all=[...lbl.parentElement.parentElement.querySelectorAll(`.addon-checkbox[data-group="${group}"]`)];
          const idx=all.findIndex(b=>b.closest("label")===lbl);
          mem[group]=mem[group]||[]; mem[group][idx]=raw;
        }else{
          // –ø–ª–∞—Ç–µ–Ω–∏ (portsii)
          mem.paid = mem.paid || [];
          const all=[...lbl.parentElement.parentElement.querySelectorAll(`.addon-checkbox:not([data-group])`)];
          const idx=all.findIndex(b=>b.closest("label")===lbl);
          const price = Number(all[idx].getAttribute("data-price")||0);
          mem.paid[idx] = { code, label: raw, price };
        }
        putAddonsFor(key, mem);
      });
    });

    // 2) –±—ä—Ä–∑–∞ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ —Ü–µ–Ω–∞ –∑–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –¥–æ–±–∞–≤–∫–∏ (–¥–≤–æ–π–Ω–æ –∫–ª–∏–∫ –≤—ä—Ä—Ö—É label)
    document.querySelectorAll('.addons label .addon-checkbox:not([data-group])').forEach(box=>{
      const lbl=box.closest("label");
      lbl.addEventListener("dblclick",(e)=>{
        e.preventDefault();
        const cur=Number(box.getAttribute("data-price")||0);
        const p=prompt("–¶–µ–Ω–∞ –∑–∞ —Ç–∞–∑–∏ –¥–æ–±–∞–≤–∫–∞:", cur); if(p==null) return;
        const val=Number(String(p).replace(",","."));
        if(!isFinite(val)) return;
        box.setAttribute("data-price", val);
        const key=currentCat(); const mem=getMemory()||{}; mem.paid=mem.paid||[];
        const all=[...lbl.parentElement.parentElement.querySelectorAll(`.addon-checkbox:not([data-group])`)];
        const idx=all.findIndex(b=>b===box);
        const labelText=(lbl.textContent||"").trim().replace(/^\+\s*/,"");
        const code=box.getAttribute("data-code")||"";
        mem.paid[idx]={ code, label: labelText, price: val };
        putAddonsFor(key, mem);
        toast("–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–µ–Ω–∞");
      });
    });
  };

  /* ===== DnD –ø—Ä–æ–¥—É–∫—Ç–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ===== */
  const domProductsToArray = ()=>{
    const list=[]; if(!grid) return list;
    grid.querySelectorAll(".product").forEach(p=>{
      const name=p.querySelector(".title")?.textContent.trim()||"–ü—Ä–æ–¥—É–∫—Ç";
      const desc=p.querySelector(".desc")?.textContent.trim()||"";
      const lvEl=p.querySelector(".price-badge .lv"); const price=lvEl?lvParse(lvEl.textContent):0;
      let img=""; const bg=p.querySelector(".photo")?.style?.backgroundImage||""; const m=bg.match(/url\(['"]?(.*?)['"]?\)/i); if(m&&m[1]) img=m[1];
      list.push({name,desc,price,img});
    }); return list;
  };
  const enableProductDnd = ()=>{
    let drag=null;
    grid?.querySelectorAll(".product").forEach(card=>{
      card.draggable=true;
      card.addEventListener("dragstart",()=>{drag=card; card.style.opacity=".4";});
      card.addEventListener("dragend",()=>{card.style.opacity="1"; drag=null;});
      card.addEventListener("dragover",e=>e.preventDefault());
      card.addEventListener("drop",e=>{
        e.preventDefault(); if(!drag||drag===card) return;
        card.parentNode.insertBefore(drag, card.nextSibling);
        const key=currentCat(); const arr=domProductsToArray(); if(CATALOG[key]){ CATALOG[key].items=arr; persistDraft(); toast("–ü–æ–¥—Ä–µ–¥–µ–Ω–æ"); }
      });
    });
  };

  /* ===== Delete product with password ‚Üí Trash ===== */
  const injectDeleteButtons = ()=>{
    grid?.querySelectorAll(".product").forEach((card,idx)=>{
      if(card.querySelector(".mod-del")) return;
      const b=document.createElement("button");
      b.className="mod-del"; b.textContent="üóë";
      Object.assign(b.style,{position:"absolute",top:"8px",right:"8px",zIndex:"5",background:"rgba(0,0,0,.6)",color:"#fff",border:"none",borderRadius:"10px",padding:"4px 8px",cursor:"pointer"});
      card.style.position="relative"; card.appendChild(b);
      b.addEventListener("click",()=>{
        if(!askPass("–ü–∞—Ä–æ–ª–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç")) return;
        const key=currentCat(); const list=CATALOG[key]?.items; if(list&&list[idx]){
          const item={...list[idx]}; trashPush({kind:"product",catKey:key,index:idx,item,title:item.name});
          list.splice(idx,1); persistDraft(); activate(key,{replace:true}); toast("–í –∫–æ—à—á–µ—Ç–æ");
        }
      });
    });
  };

  /* ===== Hook –∫—ä–º activate(), –∑–∞ –¥–∞ —Å–µ –ø—Ä–∏–ª–∞–≥–∞—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä—Å–∫–∏—Ç–µ –µ–∫—Å—Ç—Ä–∏ —Å–ª–µ–¥ –≤—Å–µ–∫–∏ —Ä–µ–Ω–¥–µ—Ä ===== */
  const _activate=activate;
  activate=function(cat,opts){
    _activate(cat,opts);
    // –ü—Ä–∏–ª–∞–≥–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–Ω–∏ –µ—Ç–∏–∫–µ—Ç–∏/—Ü–µ–Ω–∏ –∑–∞ –¥–æ–±–∞–≤–∫–∏—Ç–µ (–∞–∫–æ –∏–º–∞ –∑–∞–ø–∞–∑–µ–Ω–∏)
    applyAddonsLabelsToDOM(cat);
    enableInlineEditing();
    enableProductDnd();
    injectDeleteButtons();
    ensurePlusRightUniversal();
    ensureMobilePlusRight();
  };



/* ===== –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—è –ª–µ–≤ ‚Üî –µ–≤—Ä–æ ===== */
async function updateEuroRatesAndPrices() {
  try {
    const res = await fetch("https://api.exchangerate.host/latest?base=BGN&symbols=EUR");
    const data = await res.json();
    window.BGN_TO_EUR = data?.rates?.EUR || 1.95583;
  } catch {
    window.BGN_TO_EUR = 1.95583;
  }
}

function applyEuroConversion() {
  document.querySelectorAll(".price-badge").forEach(badge => {
    const lvEl = badge.querySelector(".lv");
    if (!lvEl) return;
    const lvValue = parseFloat(lvEl.textContent.replace(",", "."));
    const eurValue = (lvValue / (window.BGN_TO_EUR || 1.95583)).toFixed(2);
    let eurEl = badge.querySelector(".eur");
    if (!eurEl) {
      eurEl = document.createElement("span");
      eurEl.className = "eur";
      eurEl.style.marginLeft = "6px";
      eurEl.style.fontSize = "0.9em";
      eurEl.style.opacity = "0.85";
      badge.appendChild(eurEl);
    }
    eurEl.textContent = `${eurValue} ‚Ç¨`;
  });
}

/* –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ */
updateEuroRatesAndPrices().then(applyEuroConversion);

/* –ü—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ —Ü–µ–Ω–∞ */
document.body.addEventListener("input", e => {
  if (e.target.classList.contains("lv")) applyEuroConversion();
});


  /* ===== –ü–ª–∞–≤–∞—â–∏ –±—É—Ç–æ–Ω–∏ ===== */
  const addBtn = (label, bottom, onClick, style = {}) => {
    const b = document.createElement("button");
    b.textContent = label;
    Object.assign(b.style, {
      position: "fixed",
      right: "20px",
      bottom: bottom + "px",
      background: "#ff7a00",
      color: "#fff",
      border: "none",
      borderRadius: "12px",
      padding: "10px 16px",
      fontWeight: "900",
      cursor: "pointer",
      zIndex: "9999",
      boxShadow: "0 6px 20px rgba(0,0,0,.3)",
      transition: "transform 0.2s ease, box-shadow 0.2s ease"
    }, style);

    b.addEventListener("mouseenter", () => {
      b.style.transform = "translateY(-2px)";
      b.style.boxShadow = "0 8px 24px rgba(0,0,0,.4)";
    });
    b.addEventListener("mouseleave", () => {
      b.style.transform = "translateY(0)";
      b.style.boxShadow = "0 6px 20px rgba(0,0,0,.3)";
    });

    b.addEventListener("click", onClick);
    document.body.appendChild(b);
    return b;
  };

  /* üóë –ö–æ—à—á–µ */
  addBtn("üóë –ö–æ—à—á–µ", 320, openTrashUI, { background: "#333" });

  /* ‚ûï –î–æ–±–∞–≤–∏ –ø—Ä–æ–¥—É–∫—Ç */
  addBtn("‚ûï –î–æ–±–∞–≤–∏ –ø—Ä–æ–¥—É–∫—Ç", 260, () => {
    const key = currentCat();
    if (!CATALOG[key]) CATALOG[key] = { title: key.toUpperCase(), items: [] };
    CATALOG[key].items.push({
      name: "–ù–æ–≤ –ø—Ä–æ–¥—É–∫—Ç",
      desc: "–û–ø–∏—Å–∞–Ω–∏–µ...",
      price: 0,
      img: "snimki/default.jpg"
    });
    persistDraft();
    activate(key, { replace: true });
  });

// –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏—è –ø—Ä–æ–¥—É–∫—Ç
localStorage.setItem("CATALOG", JSON.stringify(CATALOG));
localStorage.setItem("ORDER", JSON.stringify(ORDER));

 
/* =====================================================
   ‚ûï –î–û–ë–ê–í–ò –î–û–ë–ê–í–ö–ê ‚Äî –í–ò–ó–£–ê–õ–ï–ù –†–ï–ñ–ò–ú –° –ö–†–™–ì–ß–ï–¢–ê
   ===================================================== */
addBtn("‚ûï –î–æ–±–∞–≤–∏ –¥–æ–±–∞–≤–∫–∞", 220, () => {
  toast("–ò–∑–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç, –∫—ä–º –∫–æ–π—Ç–æ –¥–∞ –¥–æ–±–∞–≤–∏—à –¥–æ–±–∞–≤–∫–∏ üëá");
  isAddonsEditMode = true;

  document.querySelectorAll(".product").forEach((card, i) => {
    card.style.position = "relative";

    // —Å—ä–∑–¥–∞–≤–∞–º–µ –∑–ª–∞—Ç–Ω–æ –∫—Ä—ä–≥—á–µ –≤ –≥–æ—Ä–Ω–∏—è –ª—è–≤ —ä–≥—ä–ª
    const mark = document.createElement("div");
    mark.className = "select-mark";
    Object.assign(mark.style, {
      position: "absolute",
      top: "8px",
      left: "8px",
      width: "26px",
      height: "26px",
      borderRadius: "50%",
      border: "2px solid #ffb300",
      background: "#fff",
      boxShadow: "0 2px 6px rgba(0,0,0,.2)",
      cursor: "pointer",
      zIndex: "9999", // ‚Üê –º–Ω–æ–≥–æ –≤–∞–∂–Ω–æ, –∑–∞ –¥–∞ –Ω–µ –µ –∑–∞–¥ —Å–Ω–∏–º–∫–∞—Ç–∞
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      fontWeight: "900",
      color: "#ffb300",
      transition: "all 0.15s ease",
      userSelect: "none"
    });

    mark.addEventListener("mouseenter", () => (mark.style.transform = "scale(1.1)"));
    mark.addEventListener("mouseleave", () => (mark.style.transform = "scale(1)"));

    mark.addEventListener("click", (e) => {
      e.stopPropagation();
      if (!isAddonsEditMode) return;

      mark.innerHTML = "‚úì";
      mark.style.background = "#ffb300";
      mark.style.color = "#fff";

      openAddonsEditor(i, card);

      // –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ –∫—Ä—ä–≥—á–µ—Ç–∞
      isAddonsEditMode = false;
      document.querySelectorAll(".select-mark").forEach(m => { if (m !== mark) m.remove(); });
    });

    card.appendChild(mark);
  });
}, {
  background: "#ffb300",
  color: "#fff",
  fontWeight: "900",
  border: "none",
  borderRadius: "14px",
  padding: "10px 16px",
  position: "fixed",
  right: "20px",
  zIndex: "10000"
});




  /* üìÅ –ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è */
  addBtn("üìÅ –ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è", 140, () => {
    let key = prompt("–°–ª—ä–≥ (–ª–∞—Ç–∏–Ω–∏—Ü–∞), –Ω–∞–ø—Ä. 'pizza':", "");
    if (!key) return;
    key = key.trim().toLowerCase().replace(/\s+/g, "_").replace(/[^a-z0-9_]/g, "");
    if (!key) {
      alert("–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∫–ª—é—á.");
      return;
    }
    if (ORDER.includes(key)) {
      alert("–í–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞.");
      return;
    }
    const title = prompt("–ó–∞–≥–ª–∞–≤–∏–µ:", "–ù–û–í–ê –ö–ê–¢–ï–ì–û–†–ò–Ø") || "–ù–û–í–ê –ö–ê–¢–ï–ì–û–†–ò–Ø";
    ORDER.push(key);
    CATALOG[key] = { title, items: [] };
    CAT_THUMBS[key] = CAT_THUMBS[key] || DEFAULT_CAT_THUMB;
    persistDraft();
    rebuildSidebar();
    popThenActivate(null, key);
  });



addBtn("üíæ –ó–∞–ø–∞–∑–∏ –≤—Å–∏—á–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–∏—è —Å–∞–π—Ç", 50, async () => {
  // 1) —Å—ä–±–∏—Ä–∞–º–µ –º–æ–º–µ–Ω—Ç–Ω–∞ —Å–Ω–∏–º–∫–∞ –æ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  const draft = JSON.parse(localStorage.getItem("bbq_mod_draft_v3") || "{}") || {};
  const payload = {
    CATALOG: JSON.parse(JSON.stringify(CATALOG)),
    ORDER:   [...ORDER],
    ADDONS:  JSON.parse(JSON.stringify(ADDONS)),
    cat_thumbs: { ...CAT_THUMBS, ...(draft.cat_thumbs || {}) },
    addons_labels: draft.addons_labels || {},
    savedAt: new Date().toISOString()
  };

  // 2) –æ–ø–∏—Ç –∑–∞ –æ–±–ª–∞—á–µ–Ω –∑–∞–ø–∏—Å (Upstash Redis –ø—Ä–µ–∑ /api/catalog)
  try {
    const r = await fetch("/api/catalog", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });
    if (!r.ok) throw new Error(await r.text());

    toast("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–∏—è —Å–∞–π—Ç. –ò–∑–ª–µ–∑ –æ—Ç MOD (–ò–∑—Ö–æ–¥) –∏ —Ä–µ—Ñ—Ä–µ—à–Ω–∏.");
  } catch (err) {
    console.warn("Cloud save failed, falling back to localStorage:", err);

    // 3) fallback ‚Äì –ª–æ–∫–∞–ª–µ–Ω –∑–∞–ø–∏—Å (–æ—Ñ–ª–∞–π–Ω/–≤—Ä–µ–º–µ–Ω–µ–Ω)
    try {
      localStorage.setItem("BBQ_MAIN_CATALOG", JSON.stringify(payload));
      toast("‚ö†Ô∏è –ó–∞–ø–∏—Å–∞–Ω–æ –ª–æ–∫–∞–ª–Ω–æ (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º). –ò–∑–ª–µ–∑ –æ—Ç MOD –∏ —Ä–µ—Ñ—Ä–µ—à–Ω–∏.");
    } catch (e2) {
      alert("‚ùå –ü—Ä–æ–±–ª–µ–º –ø—Ä–∏ –∑–∞–ø–∏—Å: " + e2.message);
    }
  }
});

/* =====================================================
   üß† –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–æ–±–∞–≤–∫–∏—Ç–µ –æ—Ç –ø–∞–º–µ—Ç—Ç–∞
   ===================================================== */
try {
  const savedAddons = localStorage.getItem("BBQ_ADDONS");
  if (savedAddons) {
    const data = JSON.parse(savedAddons);
    if (data && typeof data === "object") {
      Object.assign(ADDONS, data);
      console.log("‚úÖ –î–æ–±–∞–≤–∫–∏—Ç–µ —Å–∞ –∑–∞—Ä–µ–¥–µ–Ω–∏ –æ—Ç –ø–∞–º–µ—Ç—Ç–∞:", ADDONS);
    }
  }
} catch (err) {
  console.warn("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–æ–±–∞–≤–∫–∏—Ç–µ:", err);
}


/* ===== –î–∏–Ω–∞–º–∏—á–µ–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä –∑–∞ –¥–æ–±–∞–≤–∫–∏ –∫—ä–º –ø—Ä–æ–¥—É–∫—Ç ===== */


/* ===== üß© –†–µ–∂–∏–º –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç –∑–∞ –¥–æ–±–∞–≤–∫–∏ (—Å –∫—Ä—ä–≥—á–µ—Ç–∞) ===== */
let isAddonsEditMode = false;

function enableAddonsEditMode() {
  toast("–ò–∑–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç, –∫—ä–º –∫–æ–π—Ç–æ –¥–∞ –¥–æ–±–∞–≤–∏—à –¥–æ–±–∞–≤–∫–∏ üëá");
  isAddonsEditMode = true;

  // –¥–æ–±–∞–≤—è–º–µ –∫—Ä—ä–≥—á–µ –≤ –≥–æ—Ä–Ω–∏—è –ª—è–≤ —ä–≥—ä–ª –Ω–∞ –≤—Å—è–∫–∞ –∫–∞—Ä—Ç–∞
  document.querySelectorAll(".product").forEach((card, i) => {
    card.style.position = "relative";

    const mark = document.createElement("div");
    mark.className = "select-mark";
    Object.assign(mark.style, {
      position: "absolute",
      top: "6px",
      left: "6px",
      width: "26px",
      height: "26px",
      borderRadius: "50%",
      border: "2px solid #ffb300",
      background: "#fff",
      boxShadow: "0 2px 6px rgba(0,0,0,.2)",
      cursor: "pointer",
      zIndex: "10",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      fontWeight: "900",
      color: "#ffb300",
      transition: "all 0.15s ease"
    });
    mark.innerHTML = "";

    mark.addEventListener("mouseenter", () => {
      mark.style.transform = "scale(1.1)";
    });
    mark.addEventListener("mouseleave", () => {
      mark.style.transform = "scale(1)";
    });

    // –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–µ –∏–∑–±–∏—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç
    mark.addEventListener("click", (e) => {
      e.stopPropagation();
      if (!isAddonsEditMode) return;
      mark.innerHTML = "‚úì";
      mark.style.background = "#ffb300";
      mark.style.color = "#fff";
      openAddonsEditor(i, card);
      isAddonsEditMode = false;

      // –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –¥—Ä—É–≥–∏ —á–µ–∫—á–µ—Ç–∞
      document.querySelectorAll(".select-mark").forEach((m) => {
        if (m !== mark) m.remove();
      });
    });

    card.appendChild(mark);
  });
}

/* ===== üß± –ü–∞–Ω–µ–ª –∑–∞ –¥–æ–±–∞–≤–∫–∏ –∫—ä–º –ø—Ä–æ–¥—É–∫—Ç ===== */

/* ===== üü† –ë—É—Ç–æ–Ω ‚Äû–î–æ–±–∞–≤–∏ –¥–æ–±–∞–≤–∫–∞‚Äú (—Å–∞–º–æ –∑–∞ —Ö—Ä–∞–Ω–∏) ===== */
addBtn("‚ûï –î–æ–±–∞–≤–∏ –¥–æ–±–∞–≤–∫–∞", 220, () => {
  const key = currentCat().toLowerCase();

  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–∏ –∫–æ–∏—Ç–æ –Ω—è–º–∞ –¥–æ–±–∞–≤–∫–∏ (–Ω–∞–ø–∏—Ç–∫–∏)
  const blockedCats = [
    "napitki", "drinks", "vodi", "voda", "hell", "hiho",
    "fanta", "cola", "pepsi", "chai", "studeni_chai", "gazirana_voda" , "kola" ,"palachinki"
  ];

  if (blockedCats.some(b => key.includes(b))) {
    toast("‚ùå –¢–∞–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω—è–º–∞ –¥–æ–±–∞–≤–∫–∏ (–Ω–∞–ø–∏—Ç–∫–∏)");
    return;
  }

  toast("–ò–∑–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç, –∫—ä–º –∫–æ–π—Ç–æ –¥–∞ –¥–æ–±–∞–≤–∏—à –¥–æ–±–∞–≤–∫–∏ üëá");
  isAddonsEditMode = true;

  document.querySelectorAll(".product").forEach((card, i) => {
    card.style.position = "relative";

    const mark = document.createElement("div");
    mark.className = "select-mark";
    Object.assign(mark.style, {
      position: "absolute",
      top: "8px",
      left: "8px",
      width: "26px",
      height: "26px",
      borderRadius: "50%",
      border: "2px solid #ffb300",
      background: "#fff",
      boxShadow: "0 2px 6px rgba(0,0,0,.2)",
      cursor: "pointer",
      zIndex: "9999",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      fontWeight: "900",
      color: "#ffb300",
      transition: "all 0.15s ease",
      userSelect: "none"
    });

    mark.addEventListener("mouseenter", () => (mark.style.transform = "scale(1.1)"));
    mark.addEventListener("mouseleave", () => (mark.style.transform = "scale(1)"));

    mark.addEventListener("click", (e) => {
      e.stopPropagation();
      if (!isAddonsEditMode) return;

      mark.innerHTML = "‚úì";
      mark.style.background = "#ffb300";
      mark.style.color = "#fff";

      openAddonsEditor(i, card);

      // –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ –∫—Ä—ä–≥—á–µ—Ç–∞
      isAddonsEditMode = false;
      document.querySelectorAll(".select-mark").forEach((m) => {
        if (m !== mark) m.remove();
      });
    });

    card.appendChild(mark);
  });
}, {
  background: "#ffb300",
  color: "#fff",
  fontWeight: "900",
  border: "none",
  borderRadius: "14px",
  padding: "10px 16px",
  position: "fixed",
  right: "20px",
  zIndex: "10000"
});


/* =====================================================
   üß© Popup —Ä–µ–¥–∞–∫—Ç–æ—Ä –∑–∞ –¥–æ–±–∞–≤–∫–∏ —Å —Ü–µ–Ω–∞ ‚Äî —Å –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ –∑–∞–ø–∞–∑–≤–∞–Ω–µ
   ===================================================== */
function openAddonsEditor(index, cardEl) {
  const key = currentCat().toLowerCase();
  const category = CATALOG[key];
  if (!category) return toast("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞");

  // –≤–∑–µ–º–∞–º–µ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ (items + groups)
  let allItems = [];
  if (category.items) allItems = category.items;
  else if (category.groups) category.groups.forEach(g => allItems = allItems.concat(g.items || []));

  const item = allItems[index];
  if (!item) return;
  if (!item.addons) item.addons = [];

  document.querySelector(".addons-popup")?.remove();

  // overlay
  const overlay = document.createElement("div");
  Object.assign(overlay.style, {
    position: "fixed",
    inset: "0",
    background: "rgba(0,0,0,0.55)",
    zIndex: "100000",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    animation: "fadeIn .2s ease"
  });
  overlay.className = "addons-popup";

  // –∫—É—Ç–∏—è
  const box = document.createElement("div");
  Object.assign(box.style, {
    background: "#fff",
    borderRadius: "16px",
    width: "min(420px, 95%)",
    padding: "20px",
    boxShadow: "0 10px 40px rgba(0,0,0,.3)",
    fontFamily: "Segoe UI, sans-serif",
    position: "relative"
  });

  const title = document.createElement("h3");
  title.textContent = "–î–æ–±–∞–≤–∫–∏ –∫—ä–º –ø—Ä–æ–¥—É–∫—Ç–∞";
  title.style.color = "#ff7a00";
  box.appendChild(title);

  const closeBtn = document.createElement("button");
  closeBtn.textContent = "‚úñ";
  Object.assign(closeBtn.style, {
    position: "absolute",
    top: "10px",
    right: "10px",
    background: "none",
    border: "none",
    fontSize: "18px",
    cursor: "pointer"
  });
  closeBtn.onclick = () => overlay.remove();
  box.appendChild(closeBtn);

  const list = document.createElement("div");
  box.appendChild(list);

  // üß© –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤ —Ä–µ–¥
  const addRowBtn = document.createElement("button");
  addRowBtn.textContent = "+ –î–æ–±–∞–≤–∏ –Ω–æ–≤–∞ –¥–æ–±–∞–≤–∫–∞";
  Object.assign(addRowBtn.style, {
    display: "block",
    margin: "10px auto",
    background: "#eee",
    border: "1px solid #ccc",
    borderRadius: "8px",
    padding: "6px 12px",
    cursor: "pointer"
  });
  addRowBtn.onclick = () => {
    item.addons.push({ label: "", price: "0.00", checked: false });
    renderList();
  };
  box.appendChild(addRowBtn);

  function renderList() {
    list.innerHTML = "";
    item.addons.forEach((a) => {
      const row = document.createElement("div");
      row.style.display = "flex";
      row.style.alignItems = "center";
      row.style.marginBottom = "8px";
      row.style.gap = "6px";

      const chk = document.createElement("input");
      chk.type = "checkbox";
      chk.checked = !!a.checked;
      chk.onchange = () => (a.checked = chk.checked);

      const nameInput = document.createElement("input");
      nameInput.type = "text";
      nameInput.placeholder = "–∏–º–µ –Ω–∞ –¥–æ–±–∞–≤–∫–∞";
      nameInput.value = a.label || "";
      Object.assign(nameInput.style, {
        flex: "1",
        padding: "5px 8px",
        border: "1px solid #ccc",
        borderRadius: "6px"
      });
      nameInput.oninput = () => (a.label = nameInput.value);

      const priceInput = document.createElement("input");
      priceInput.type = "number";
      priceInput.min = "0";
      priceInput.step = "0.10";
      priceInput.placeholder = "—Ü–µ–Ω–∞";
      priceInput.value = a.price || "";
      Object.assign(priceInput.style, {
        width: "70px",
        padding: "4px 6px",
        border: "1px solid #ccc",
        borderRadius: "6px",
        textAlign: "right"
      });
      priceInput.oninput = () => (a.price = priceInput.value);

      const lvLabel = document.createElement("span");
      lvLabel.textContent = "–ª–≤";
      lvLabel.style.fontWeight = "600";
      lvLabel.style.color = "#444";

      row.append(chk, nameInput, priceInput, lvLabel);
      list.appendChild(row);
    });
  }

  renderList();

  const saveBtn = document.createElement("button");
  saveBtn.textContent = "üíæ –ó–∞–ø–∞–∑–∏";
  Object.assign(saveBtn.style, {
    display: "block",
    margin: "12px auto 0",
    background: "#ff7a00",
    color: "#fff",
    fontWeight: "900",
    border: "none",
    borderRadius: "8px",
    padding: "8px 16px",
    cursor: "pointer"
  });

  saveBtn.onclick = () => {
    const selectedAddons = item.addons.filter(a => a.checked);
    // üíæ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ –∑–∞–ø–∏—Å–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
    if (!CATALOG[key].items[index]) CATALOG[key].items[index] = item;
    CATALOG[key].items[index].addons = item.addons;
    localStorage.setItem("CATALOG", JSON.stringify(CATALOG));

    if (selectedAddons.length === 0) {
      toast("‚ö†Ô∏è –ù–µ —Å–∏ –∏–∑–±—Ä–∞–ª –¥–æ–±–∞–≤–∫–∏!");
      overlay.remove();
      return;
    }

    toast("‚úÖ –î–æ–±–∞–≤–∫–∏—Ç–µ —Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∏");

    let sidePanel = cardEl.querySelector(".addons-side");
    if (!sidePanel) {
      sidePanel = document.createElement("div");
      sidePanel.className = "addons-side";
      cardEl.style.position = "relative";
      cardEl.appendChild(sidePanel);
    } else {
      sidePanel.innerHTML = "";
    }

    const title = document.createElement("div");
    title.className = "title";
    title.textContent = "–î–æ–±–∞–≤–∫–∏";
    sidePanel.appendChild(title);

    selectedAddons.forEach((a) => {
      const row = document.createElement("div");
      row.className = "addon-row";

      const lbl = document.createElement("span");
      lbl.textContent = `+ ${a.label}`;

      const price = document.createElement("span");
      price.textContent = `${parseFloat(a.price).toFixed(2)} –ª–≤`;

      const del = document.createElement("button");
      del.textContent = "‚úñ";
      del.onclick = () => {
        const pass = prompt("üîí –í—ä–≤–µ–¥–∏ –ø–∞—Ä–æ–ª–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ:");
        if (pass === "0000") {
          item.addons = item.addons.filter(x => x !== a);
          toast(`üóëÔ∏è ${a.label} –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–∞`);
          row.remove();
          CATALOG[key].items[index].addons = item.addons;
          localStorage.setItem("CATALOG", JSON.stringify(CATALOG));
        } else {
          alert("‚ùå –ì—Ä–µ—à–Ω–∞ –ø–∞—Ä–æ–ª–∞!");
        }
      };

      const right = document.createElement("div");
      right.className = "addon-right";
      right.append(price, del);

      row.append(lbl, right);
      sidePanel.appendChild(row);
    });

    overlay.remove();
  };

  box.appendChild(saveBtn);
  overlay.appendChild(box);
  document.body.appendChild(overlay);
}

/* ==============================================
   üé® –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞ –≤—ä–Ω—à–µ–Ω –ø–∞–Ω–µ–ª —Å –¥–æ–±–∞–≤–∫–∏ –≤–¥—è—Å–Ω–æ
   ============================================== */
(function ensureAddonsSideCSS() {
  const css = `
  .product, .menu-item, .item-card {
    overflow: visible !important;
    position: relative !important;
    z-index: 5;
  }

  .addons-side {
    position: absolute;
    left: 105%;
    top: 0;
    margin-left: 10px;
    background: #fff;
    border: 1px solid #ffb30055;
    border-radius: 10px;
    padding: 10px 14px;
    box-shadow: 0 4px 18px rgba(0,0,0,.08);
    min-width: 190px;
    z-index: 9999;
    transition: all 0.25s ease;
    animation: slideInRight .25s ease forwards;
  }

  .addons-side .title {
    font-weight: 700;
    color: #ff7a00;
    margin-bottom: 6px;
    text-align: center;
  }

  .addons-side .addon-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 4px;
    font-size: 14px;
  }

  .addons-side button {
    background: none;
    border: none;
    color: #ff4d4d;
    font-weight: 900;
    cursor: pointer;
    margin-left: 6px;
  }

  @keyframes slideInRight {
    from { opacity: 0; transform: translateX(10px); }
    to   { opacity: 1; transform: translateX(0); }
  }
  `;
  const s = document.createElement("style");
  s.textContent = css;
  document.head.appendChild(s);
})();



/* ==============================================
   üé® –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞ –≤—ä–Ω—à–µ–Ω –ø–∞–Ω–µ–ª —Å –¥–æ–±–∞–≤–∫–∏ –≤–¥—è—Å–Ω–æ
   ============================================== */
(function ensureAddonsSideCSS() {
  const css = `
  .product, .menu-item, .item-card {
    overflow: visible !important;
    position: relative !important;
    z-index: 5;
  }

  .addons-side {
    position: absolute;
    left: 105%;
    top: 0;
    margin-left: 10px;
    background: #fff;
    border: 1px solid #ffb30055;
    border-radius: 10px;
    padding: 10px 14px;
    box-shadow: 0 4px 18px rgba(0,0,0,.08);
    min-width: 190px;
    z-index: 9999;
    transition: all 0.25s ease;
    animation: slideInRight .25s ease forwards;
  }

  .addons-side .title {
    font-weight: 700;
    color: #ff7a00;
    margin-bottom: 6px;
    text-align: center;
  }

  .addons-side .addon-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 4px;
    font-size: 14px;
  }

  .addons-side button {
    background: none;
    border: none;
    color: #ff4d4d;
    font-weight: 900;
    cursor: pointer;
    margin-left: 6px;
  }

  @keyframes slideInRight {
    from { opacity: 0; transform: translateX(10px); }
    to   { opacity: 1; transform: translateX(0); }
  }
  `;
  const s = document.createElement("style");
  s.textContent = css;
  document.head.appendChild(s);
})();

/* =====================================================
   üü† –í–∏–∑—É–∞–ª–µ–Ω –±–∞–Ω–µ—Ä –∑–∞ MODERATOR MODE —Å –±—É—Ç–æ–Ω –ò–∑—Ö–æ–¥
   ===================================================== */
(function showModeratorBanner() {
  if (document.querySelector("#moderator-banner")) return;

  const banner = document.createElement("div");
  banner.id = "moderator-banner";
  banner.innerHTML = `
    <span>üü† MODERATOR MODE</span>
    <button id="exitModeratorBtn" style="
      margin-left:15px;
      background:#fff;
      color:#ff7a00;
      font-weight:700;
      border:none;
      border-radius:8px;
      padding:4px 10px;
      cursor:pointer;
    ">–ò–∑—Ö–æ–¥</button>
  `;
  Object.assign(banner.style, {
    position: "fixed",
    top: "0",
    left: "50%",
    transform: "translateX(-50%)",
    background: "linear-gradient(90deg, #ff7a00, #ffb300)",
    color: "#fff",
    fontWeight: "900",
    fontSize: "18px",
    padding: "10px 30px",
    borderRadius: "0 0 14px 14px",
    zIndex: "1000000",
    textShadow: "0 2px 5px rgba(0,0,0,0.3)",
    boxShadow: "0 4px 16px rgba(0,0,0,0.2)",
    letterSpacing: "1px",
    userSelect: "none"
  });

  document.body.appendChild(banner);
  document.getElementById("exitModeratorBtn").onclick = exitModeratorMode;
})();

/* =====================================================
   üß≠ –†–ï–ù–î–ï–†–ò–†–ê–ù–ï –ù–ê –ü–†–û–î–£–ö–¢–ò –í MODERATOR MODE (FULL)
   ===================================================== */
document.addEventListener("DOMContentLoaded", () => {
  const qs = new URLSearchParams(location.search);
  const isModerator = qs.get("mode") === "moderator";
  if (!isModerator) return;

  const grid = document.getElementById("productGrid");
  if (!grid) return;

  grid.innerHTML = "";

  // –ê–∫–æ –Ω—è–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äì —Å—ä–∑–¥–∞–≤–∞–º–µ –±–∞–∑–æ–≤–∞
  if (!ORDER.length) {
    ORDER.push("promocii");
    CATALOG["promocii"] = {
      title: "–ü–†–û–ú–û–¶–ò–ò",
      items: [
        { name: "BBQ –ë—É—Ä–≥–µ—Ä", desc: "–ö–ª–∞—Å–∏–∫–∞ –Ω–∞ –∂–∞—Ä", price: 8.99, img: "snimki/default.jpg" },
        { name: "–ü–∞–ª–∞—á–∏–Ω–∫–∞ XL", desc: "–ì–æ–ª—è–º —Ä–∞–∑–º–µ—Ä", price: 5.50, img: "snimki/default.jpg" }
      ]
    };
    localStorage.setItem("CATALOG", JSON.stringify(CATALOG));
    localStorage.setItem("ORDER", JSON.stringify(ORDER));
  }

  // –†–µ–Ω–¥–µ—Ä–∏—Ä–∞–Ω–µ
  ORDER.forEach(key => {
    const cat = CATALOG[key];
    if (!cat) return;

    const h = document.createElement("h2");
    h.textContent = cat.title;
    h.style.cssText = "color:#ff7a00;font-weight:900;margin-top:20px;";
    grid.appendChild(h);

    (cat.items || []).forEach((item, i) => {
      const card = document.createElement("div");
      card.className = "product";
      card.style.cssText = `
        border:1px solid #ffb300;
        padding:10px;
        margin:8px 0;
        border-radius:10px;
        background:#fff;
        max-width:360px;
        box-shadow:0 2px 6px rgba(0,0,0,0.1);
      `;
      card.innerHTML = `
        <div style="font-weight:700;">${item.name || "–ë–µ–∑ –∏–º–µ"}</div>
        <div style="color:#444;">${parseFloat(item.price||0).toFixed(2)} –ª–≤.</div>
        <button class="editAddonsBtn"
          style="background:#ff7a00;color:#fff;border:none;
          border-radius:8px;padding:6px 12px;margin-top:6px;cursor:pointer;">
          –î–æ–±–∞–≤–∫–∏
        </button>
      `;
      card.querySelector(".editAddonsBtn").onclick = () => openAddonsEditor(i, card);
      grid.appendChild(card);
    });

    // –±—É—Ç–æ–Ω ‚Äû‚ûï –ù–æ–≤ –ø—Ä–æ–¥—É–∫—Ç‚Äú
    const addItemBtn = document.createElement("button");
    addItemBtn.textContent = "‚ûï –ù–æ–≤ –ø—Ä–æ–¥—É–∫—Ç";
    Object.assign(addItemBtn.style, {
      background: "#ffb300",
      color: "#fff",
      border: "none",
      borderRadius: "8px",
      padding: "8px 14px",
      fontWeight: "700",
      cursor: "pointer",
      marginTop: "10px"
    });
    addItemBtn.onclick = () => {
      const name = prompt("–ò–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞:");
      const price = parseFloat(prompt("–¶–µ–Ω–∞:") || "0");
      if (!name) return;
      cat.items.push({ name, price, addons: [] });
      localStorage.setItem("CATALOG", JSON.stringify(CATALOG));
      localStorage.setItem("ORDER", JSON.stringify(ORDER));
      toast("‚úÖ –î–æ–±–∞–≤–µ–Ω –µ –Ω–æ–≤ –ø—Ä–æ–¥—É–∫—Ç!");
      location.reload();
    };
    grid.appendChild(addItemBtn);
  });
});

  /* ===== Boot ===== */
  applySaved(read(LS_MOD_DATA,null));
  applySaved(read(LS_MOD_DRAFT,null));
  rebuildSidebar();
  const cur=currentCat(); if(titleEl && CATALOG[cur]?.title) titleEl.textContent = CATALOG[cur].title;
  activate(cur, {replace:true});
});

